#!/bin/bash
#
# mpplus - Run an MPD client and visualizer, manage music services
#
# Written by Ronald Joe Record <ronaldrecord@gmail.com>
# March, 2022
#
# I am using two separate terminal emulators as I want a smaller
# font for the visualizer terminal. The terminal command options are
# customized for my setup, you may need to adjust the geometry
# to get the two windows to align as desired. I wanted the visualizer
# terminal window at the bottom of the screen and aligned with
# the MPD client terminal window.
#
# If the "-t" option is specified then only a single terminal
# emulator is used, tilix. Tilix is invoked twice with different
# profiles, one for an MPD client and another for the visualizer.
# The profiles are named "MusicPlayer" and "Visualizer".
#
# In both types of invocations, with or without "-t", the terminal
# profiles used have font size settings of 32 and 8 for the MPD client and
# visualizer, respectively. This aligns the windows, on my system, when
# not in fullscreen mode.
#
# When using the cool-retro-term for MPD client display (-r option), adjust
# the size of the cool-retro-term window manually so it aligns with the
# visualizer window. I could not figure out how to specify a geometry
# for the cool-retro-term window when invoked with "-e ${MPD_CLIENT}".
#
# An MPD client can be specified on the command line, default is 'mpcplus'.
# Only 'mpcplus' and 'ncmpcpp' MPD clients are supported for album cover art display.

BOLD=$(tput bold 2>/dev/null)
NORM=$(tput sgr0 2>/dev/null)
PLEASE="Please enter your"
VTITLE="Spectrum Visualizer"
MTITLE="MusicPlayerPlus"
VISUALIZER=mppcava
CONSOLE_MODE=
DO_NOT_EXIT=
MPP_DIR="/usr/share/musicplayerplus"
FIG_FONTS="${MPP_DIR}/figlet-fonts"
FIG_TEXT="MusicPlayerPlus"
USE_FONT="Standard"
USE_GRAD=1
DOC_DIR="/usr/share/doc/musicplayerplus"
SCRIPTS="${MPP_DIR}/scripts"
BEETSLOGDIR="${HOME}/.config/beets/logs"
# Some configuration can be maintained here
MPPCONF="${HOME}/.config/mpprc"

usage() {
  printf "\nUsage: mpplus [-A on|off] [-a] [-b] [-B] [-c] [-C client] [-E] [-e] [-F]"
  printf "\n\t[-f] [-G] [-g] [-D art|bandcamp|discogs|local|soundcloud] [-d music_directory]"
  printf "\n\t[-h] [-H] [-I] [-i] [-jJ] [-k] [-K] [-l config|spotify|status] [-L] [-m]"
  printf "\n\t[-n num] [-N] [-M alsaconf|enable|disable|restart|start|stop|status] [-p]"
  printf "\n\t[-P script] [-q] [-Q] [-r] [-R] [-s song] [-S] [-t] [-T on|off] [-U vault]"
  printf "\n\t[-u] [-v viz_comm] [-w|W] [-x query] [-X query] [-y] [-Y] [-z fzmpopt] [-Z]"
  printf "\nMPCplus/Visualizer options:"
  printf "\n\t-A 'on|off' specifies whether to display album cover art"
  printf "\n\t-C 'client' indicates use 'client' MPD client rather than mpcplus"
  printf "\n\t-E indicates do not use gradient colors for spectrum visualizer"
  printf "\n\t-f indicates fullscreen display"
  printf "\n\t-h indicates half-height for visualizer window (with -f only)"
  printf "\n\t-H indicates disable use of extended window manager hints"
  printf "\n\t-P script specifies the ASCIImatics script to run in visualizer pane"
  printf "\n\t-q indicates quarter-height for visualizer window (with -f only)"
  printf "\n\t-c indicates use current terminal emulator / console mode"
  printf "\n\t-e indicates use simple terminal emulator"
  printf "\n\t-g indicates use gnome terminal emulator"
  printf "\n\t-k indicates use kitty terminal emulator"
  printf "\n\t-r indicates use retro terminal emulator"
  printf "\n\t-t indicates use tilix terminal emulator"
  printf "\n\t-v 'viz_comm' indicates use visualizer 'viz_comm' rather than mppcava"
  printf "\nASCIImatics animation options:"
  printf "\n\t-a indicates play audio during ASCIImatics display"
  printf "\n\t-b indicates use backup audio during ASCIImatics display"
  printf "\n\t-j indicates use Julia Set scenes in ASCIImatics display"
  printf "\n\t-J indicates Julia Set with several runs using different parameters"
  printf "\n\t-m indicates use MusicPlayerPlus scenes in ASCIImatics display"
  printf "\n\t-n num specifies the number of times to cycle ASCIImatics scenes"
  printf "\n\t-N indicates use alternate comments in Plasma ASCIImatics scenes"
  printf "\n\t-p indicates use Plasma scenes in ASCIImatics display"
  printf "\n\t-s song specifies a song to accompany an ASCIImatics animation"
  printf "\n\t\t'song' can be the full pathname to an audio file or a"
  printf "\n\t\trelative pathname to an audio file in the MPD music library"
  printf "\n\t\tor $HOME/Music/"
  printf "\n\t-S indicates display ASCIImatics splash animation"
  printf "\nGeneral options:"
  printf "\n\t-B indicates analyze MPD music dir with Blissify and exit"
  printf "\n\t-D 'art' indicates download album cover art and exit"
  printf "\n\t-D 'bandcamp' indicates download Bandcamp songs and exit"
  printf "\n\t-D 'soundcloud' indicates download Soundcloud songs and exit"
  printf "\n\t-D 'discogs' generate markdown from Discogs collection"
  printf "\n\t-D 'local' generate markdown from local music library"
  printf "\n\t-Q indicates display MusicPlayerPlus info and exit"
  printf "\n\t-U 'vault' indicates upload releases in 'vault' to Discogs collection"
  printf "\n\t-Z performs a dry run of a Discogs collection upload"
  printf "\n\t-d 'music_directory' specifies the music directory to use for"
  printf "\n\t\tdownloaded album cover art. Without this option -D will use"
  printf "\n\t\tthe 'MUSIC_DIR' setting in '~/.config/mpprc'"
  printf "\n\t-F indicates convert WAV format files in the music library"
  printf "\n\t\tto MP3 format files and exit. A subsequent 'mpplus -I' import"
  printf "\n\t\twill be necessary to import these newly converted music files."
  printf "\n\t-G indicates convert M4A format files in the music library"
  printf "\n\t\tto MP3 format files and exit. A subsequent 'mpplus -I' import"
  printf "\n\t\twill be necessary to import these newly converted music files."
  printf "\n\t-I indicates import albums and songs from 'music_directory' to beets and exit"
  printf "\n\t\tIn conjunction with '-I', the '-A on' option disables auto-tagging"
  printf "\n\t-i indicates start mpplus in interactive mode"
  printf "\n\t-K indicates kill MusicPlayerPlus tmux sessions and ASCIImatics scripts"
  printf "\n\t-l 'config' launches an editor in a terminal window to configure MusicPlayerPlus"
  printf "\n\t-l 'spotify' launches the Spotify Player in a terminal window"
  printf "\n\t-l 'status' displays services status and exits"
  printf "\n\t-L indicates download lyrics to the Beets library and exit"
  printf "\n\t-M 'action' can be used to control the Music Player Daemon (MPD)"
  printf "\n\t    or configure the ALSA sound system"
  printf "\n\t\tALSA configuration will update the ALSA configuration in '/etc/asound.conf'"
  printf "\n\t-R indicates record tmux session with asciinema"
  printf "\n\t\tAsciinema is not installed by MusicPlayerPlus"
  printf "\n\t\tTo record tmux sessions with asciinema, use your system's"
  printf "\n\t\tpackage manager to install it (e.g. apt install asciinema)"
  printf "\n\t-T 'on|off' specifies whether to use a tmux session"
  printf "\n\t-w indicates write metadata during beets import"
  printf "\n\t-W indicates do not write metadata during beets import"
  printf "\n\t-x 'query' uses AcousticBrainz to retrieve audio-based information"
  printf "\n\t\tfor all music library media matching 'query' [deprecated]. A query"
  printf "\n\t\tof 'all' performs the retrieval on the entire music library."
  printf "\n\t-X 'query' performs an analysis and retrieval, using Essentia,"
  printf "\n\t\tof audio-based information for all music library media"
  printf "\n\t\tmatching 'query'. A query of 'all' performs the analysis"
  printf "\n\t\tand retrieval on the entire music library."
  printf "\n\t-Y initializes the YAMS last.fm scrobbler service"
  printf "\n\t-y disables the YAMS last.fm scrobbler service"
  printf "\n\t-z fzmpopt specifies the fzmp option and invokes fzmp to"
  printf "\n\t\tlist/search/select media in the MPD library."
  printf "\n\t\tValid values for fzmpopt are 'a', 'A', 'g', 'p', or 'P'"
  printf "\n\t-u displays this usage message and exits\n"
  printf "\nType 'man mpplus' for detailed usage info on mpplus"
  printf "\nType 'man mpcplus' for detailed usage info on the mpcplus MPD client"
  printf "\nType 'man mppsplash' for detailed usage info on the mppsplash command\n"
  exit 1
}

# Use 'mpplus -V ...' to disable clearing the screen
clear_screen() {
  [ "${debug}" ] || tput clear
}

farewell_exit() {
  heading "$1" "Farewell"
  printf "\n"
  exit 0
}

is_running() {
  svc=$1
  [ "${svc}" ] || return 1
  if [ "${svc}" == "mpd" ]
  then
    pgrep "mpd" &> /dev/null
    if [ $? -eq 0 ]
    then
      return 0
    else
      pgrep "mopidy" &> /dev/null
      if [ $? -eq 0 ]
      then
        return 0
      else
        systemctl --user is-active mpd.socket > /dev/null 2>&1
        return $?
      fi
    fi
  else
    pgrep "${svc}" &> /dev/null
    return $?
  fi
}

prompt_for_url() {
  local url
  if [ "$1" == "youtube" ]
  then
    printf "\nEnter a YouTube URL you wish to list."
  else
    printf "\nEnter a URL that contains audio you wish to extract and download."
    printf "\nThis can be a YouTube video URL, a YouTube playlist URL,"
    printf "\nor any URL from many supported sites."
  fi
  printf "\n\nTo cancel and return to menus, enter nothing and press 'Enter'\n\n"
  read -r -e -p 'Enter URL: ' url
  DL_URL="${url}"
}

# Prompt before continuing
prompt_continue() {
  printf "\nPress ${BOLD}<Enter>${NORM} to continue ... "
  read -r yn
  clear_screen
}

prompt_for_user() {
  local user
  printf "\nEnter a YouTube user name."
  printf "\n\nTo cancel and return to menus, enter nothing and press 'Enter'\n\n"
  read -r -e -p 'Enter YouTube Username: ' user
  YT_USER="${user}"
}

kill_tmux_sessions() {
  SESSIONS="musicplayerplus mppsplash"
  for session in ${SESSIONS}
  do
    ps -ef | grep tmux | grep ${session} > /dev/null && {
      tmux kill-session -t ${session}
    }
  done
  ASCIIS="mppjulia mpprocks mppplasma"
  for ascii in ${ASCIIS}
  do
    ps -ef | grep -v grep | grep ${ascii} > /dev/null && {
      ps -ef | grep -v grep | grep ${ascii} | while IFS= read -r line
      do
        pid=$(echo "$line" | awk ' { print $2 } ')
        kill ${pid}
      done
    }
  done
}

center_window() {
  kit_win="$1"
  position="$2"
  read -r winid grav width height \
    < <(echo ${kit_win} | awk ' { print $1, $2, $5, $6} ')
  [ "${winid}" ] && {
    xoff=$((s_wid - width))
    xoff=$((xoff / 2))
    if [ "${position}" == "bottom" ]
    then
      vhit=${height}
      yoff=$((s_hit - height))
    else
      if [ "${position}" == "top" ]
      then
        yoff=0
      else
        toff=$((s_hit - position))
        [ "${KITTY}" ] || [ "${SIMPLE}" ] && toff=$((toff - 150))
        yoff=$((toff - height))
        [ ${toff} -lt 0 ] && {
          height=${toff}
          yoff=0
        }
      fi
    fi
    mvarg="${grav},${xoff},${yoff},${width},${height}"
    wmctrl -i -r "${winid}" -b "remove,fullscreen,maximized_vert"
    wmctrl -i -r "${winid}" -e "${mvarg}"
  }
}

pick_terminal() {
  if [ "${have_kitty}" ]
  then
    KITTY=1
  else
    if [ "${have_gnome}" ]
    then
      GNOME=1
    else
      if [ "${have_tilix}" ]
      then
        TILIX=1
      else
        if [ "${have_retro}" ]
        then
          RETRO=1
        else
          if [ "${have_simple}" ]
          then
            SIMPLE=1
          else
            return 1
          fi
        fi
      fi
    fi
  fi
  return 0
}

make_it_so() {
  [ "${CONVERT_M4A}" ] && {
    if [ -x ${SCRIPTS}/m4a2mp3.sh ]
    then
      printf "\nConverting M4A files\n"
      if [ "${MUSIC_DIRECTORY}" ]
      then
        ${SCRIPTS}/m4a2mp3.sh -d "${MUSIC_DIRECTORY}"
      else
        ${SCRIPTS}/m4a2mp3.sh
      fi
    else
      echo "${SCRIPTS}/m4a2mp3.sh not found or not executable"
      echo "Check your MusicPlayerPlus installation"
      echo ""
      echo "Manual media file conversion may be required"
    fi
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }
  [ "${CONVERT_WAV}" ] && {
    if [ -x ${SCRIPTS}/wav2mp3.sh ]
    then
      printf "\nConverting WAV files\n"
      if [ "${MUSIC_DIRECTORY}" ]
      then
        ${SCRIPTS}/wav2mp3.sh -d "${MUSIC_DIRECTORY}"
      else
        ${SCRIPTS}/wav2mp3.sh
      fi
    else
      echo "${SCRIPTS}/wav2mp3.sh not found or not executable"
      echo "Check your MusicPlayerPlus installation"
      echo ""
      echo "Manual media file conversion may be required"
    fi
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${DOWNLOAD_ART}" ] && {
    [ -f "${HOME}/.config/beets/logs/import.log" ] && {
      [ "${have_beet}" ] && {
        printf "\n\tDownloading album cover art with Beets fetchart ..."
        beet fetchart ${MUSIC_DIR} > /dev/null 2>&1
        printf " done\n\n"
      }
    }
    if [ -x ${SCRIPTS}/download_cover_art.sh ]
    then
      printf "\n\tDownloading album cover art with sacad ..."
      if [ "${MUSIC_DIRECTORY}" ]
      then
        ${SCRIPTS}/download_cover_art.sh -d "${MUSIC_DIRECTORY}"
      else
        ${SCRIPTS}/download_cover_art.sh
      fi
      printf "\n\n"
    else
      echo "${SCRIPTS}/download_cover_art.sh not found or not executable"
      echo "Check your MusicPlayerPlus installation"
      echo ""
    fi
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${DOWNLOAD_BANDCAMP}" ] && {
    mppinit bandcamp
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${DOWNLOAD_SOUNDCLOUD}" ] && {
    mppinit soundcloud
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${DOWNLOAD_DISCOGS}" ] && {
    mppinit discogs
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${DOWNLOAD_LOCAL}" ] && {
    mppinit discogs Local
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${vault}" ] && {
    vault=$(basename "${vault}")
    mppinit ${dryrun} discogs upload ${vault} ${vault}
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    vault=
    return
  }

  [ "${DOWNLOAD_YOUTUBE}" ] && {
    [ "${DL_URL}" ] || prompt_for_url
    [ "${DL_URL}" ] && mppdl "${DL_URL}"
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${LIST_YT_PLAYLISTS}" ] && {
    [ "${YT_USER}" ] || prompt_for_user
    [ "${YT_USER}" ] && listyt -p "${YT_USER}" | less
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${LIST_YT_UPLOADS}" ] && {
    [ "${YT_USER}" ] || prompt_for_user
    [ "${YT_USER}" ] && listyt -v "${YT_USER}" | less
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${LIST_YT_URL}" ] && {
    [ "${DL_URL}" ] || prompt_for_url youtube
    [ "${DL_URL}" ] && listyt "${DL_URL}" | less
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${ACT_YAMS}" ] && {
    [ -d ${HOME}/.config/yams ] || mkdir -p ${HOME}/.config/yams
    if [ "${need_yams}" ]
    then
      YAMSCOMM=
      have_yams=$(type -p yams)
      if [ "${have_yams}" ]
      then
        YAMSCOMM=yams
      else
        [ -x ${HOME}/.local/bin/yams ] && {
          YAMSCOMM="${HOME}/.local/bin/yams"
        }
      fi
      if [ "${YAMSCOMM}" ]
      then
        printf "\n\tInitializing YAMS last.fm scrobbler service\n"
        printf "\n\tOpen the token URL to authenticate with Last.fm\n\n"
        ${YAMSCOMM} -k > /dev/null 2>&1
        ${YAMSCOMM}
        ${YAMSCOMM} -k > /dev/null 2>&1
        if [ -f "${HOME}/.config/yams/yams.yml" ]
        then
          need_yams=
        else
          need_yams=1
        fi
        if [ "${need_yams}" ]
        then
          echo "YAMS not activated."
          echo "Activate YAMS manually by executing the command 'yams'."
        else
          # Prepare the yams scrobbler user service for later activation
          systemctl --user is-active --quiet yams.service
          if [ $? -eq 0 ]
          then
            # User service is active, restart to pickup any config changes
            systemctl --user restart --quiet yams.service
          else
            systemctl --user start --quiet yams.service
          fi
          systemctl --user is-enabled --quiet yams.service
          [ $? -eq 0 ] || systemctl --user enable --quiet yams.service
          echo ""
          echo "YAMS Last.fm scrobbler activated and running as a service."
          echo "Music played with MusicPlayerPlus should be reflected"
          echo "in your Last.fm account statistics."
          echo ""
          echo "To disable YAMS run the command 'mpplus -y'."
          echo ""
        fi
      else
        echo "The yams front-end not found or not executable."
        echo "Check your MusicPlayerPlus installation."
        echo "Yams can be installed with the command:"
        echo "    python3 -m pip install YAMScrobbler"
        echo ""
      fi
      [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
      set_need_yams
      return
    else
      echo "A YAMS service has been detected."
      echo "This may indicate YAMS has already been activated."
      echo "To re-activate YAMS, disable and de-activate the YAMS service:"
      echo "    systemctl --user disable yams.service"
      echo "    systemctl --user stop yams.service"
      echo "and re-run the command 'mpplus -Y'"
      [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
      set_need_yams
      return
    fi
  }

  [ "${DIS_YAMS}" ] && {
    # Disable YAMS service
    echo "Disabling YAMS Last.fm scrobbler service"
    echo "and removing YAMS configuration $HOME/.config/yams/"
    while true
    do
      read -p "Continue to disable and remove YAMS configuration ? (y/n) " yn
      case $yn in
        [Yy]* )
              systemctl --user disable yams.service
              systemctl --user stop yams.service
              rm -rf ${HOME}/.config/yams
              printf "\n\nYAMS disabled and configuration removed."
              printf "\nTo re-enable YAMS run the command 'mpplus -Y'.\n"
              farewell_exit "Exiting MusicPlayerPlus"
              ;;
        [Nn]* )
              printf "\n\nYAMS service left as-is, no changes made."
              printf "\nExiting.\n"
              farewell_exit "Exiting MusicPlayerPlus"
              ;;
            * ) echo "Please answer yes or no."
              ;;
      esac
    done
  }

  [ "${FETCH_LYRICS}" ] && {
    if [ "${have_beet}" ]
    then
      echo ""
      echo "===================================================================="
      echo "Fetching lyrics for all songs in the music library which do not"
      echo "already contain lyrics. This can take several minutes or hours"
      echo "depending on how many songs need lyrics."
      echo ""
      echo "The process is performed in the background and non-interactively."
      echo "As long as your computer remains on and connected to the Internet, the"
      echo "process should run uninterrupted and without need for attention."
      echo "You may continue working and leave the lyrics update unattended."
      echo ""
      [ -d "${BEETSLOGDIR}" ] || mkdir -p "${BEETSLOGDIR}"
      LLOG="${BEETSLOGDIR}/lyrics.log"
      nohup beet lyrics >> ${LLOG} 2>&1 &
      beetpid=$!
      if [ "${CONSOLE_MODE}" ]
      then
        echo "To monitor the progress of the lyrics downloads, examine the log:"
        echo ""
        echo "tail -f ${LLOG}"
      else
        [ "${have_kitty}" ] || [ "${have_gnome}" ] && {
          echo "A terminal window will be opened to monitor the progress."
          echo ""
        }
        if [ "${have_kitty}" ]; then
          kitty --title="Beets Lyrics Log" tail --pid=${beetpid} -f ${LLOG} &
        else
          if [ "${have_gnome}" ]; then
            gnome-terminal --title="Beets Lyrics Log" --geometry=90x25+50+25 \
                           -- tail --pid=${beetpid} -f ${LLOG} &
          else
            echo "To monitor the progress of the lyrics downloads, examine the log:"
            echo ""
            echo "tail -f ${LLOG}"
          fi
        fi
      fi
      echo "===================================================================="
      echo ""
    else
      echo "The 'beet' command is not in your PATH or is not executable."
      echo "Check your MusicPlayerPlus installation."
      echo "Once the 'beet' command is executable and in the execution PATH,"
      echo "Re-run this command."
    fi
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${ACBRAINZ}" ] && {
    if [ "${have_beet}" ]
    then
      echo ""
      echo "==================================================================="
      echo "Retrieving audio-based information for media matching '${ACBRAINZ}'"
      echo "in the Beets music library management system. The retrieval can"
      echo "take a few seconds or more per album. A large music library may"
      echo "take hours to retrieve all the metadata."
      echo ""
      echo "The process is performed in the background and non-interactively."
      echo "As long as your computer remains on and connected to the Internet,"
      echo "the process should run uninterrupted and without need for attention."
      echo "You may continue working and leave the extraction unattended."
      echo ""
      if [ "${ACBRAINZ}" == "all" ]
      then
        extquery=
      else
        extquery="${ACBRAINZ}"
      fi
      [ -d "${BEETSLOGDIR}" ] || mkdir -p "${BEETSLOGDIR}"
      XLOG="${BEETSLOGDIR}/acousticbrainz.log"
      echo "# Retrieving audio metadata with acousticbrainz plugin" >> "${XLOG}"
      START_SECONDS=$(date +%s)
      if [ "${extquery}" ]
      then
        nohup beet -v --plugins=acousticbrainz acousticbrainz ${extquery} >> ${XLOG} 2>&1 &
      else
        ${SCRIPTS}/ab_albums.sh "${XLOG}" &
      fi
      beetpid=$!
      [ -x ${SCRIPTS}/logtime.sh ] && {
        ${SCRIPTS}/logtime.sh -s "${START_SECONDS}" -l "${XLOG}" \
                              -p "${beetpid}" -d "Acoustic retrieval" 2>&1 &
      }
      if [ "${CONSOLE_MODE}" ]
      then
        echo "To monitor the progress of the acoustic metadata retrieval,"
        echo "examine the extraction log:"
        echo ""
        echo "tail -f ${XLOG}"
      else
        [ "${have_kitty}" ] || [ "${have_gnome}" ] && {
          echo "A terminal window will be opened to monitor the progress"
          echo "of the acoustic metadata retrieval."
        }
        if [ "${have_kitty}" ]; then
          kitty --title="AcousticBrainz Log" tail --pid=${beetpid} -f ${XLOG} &
        else
          if [ "${have_gnome}" ]; then
            gnome-terminal --title="AcousticBrainz Log" --geometry=90x25+50+25 \
                           -- tail --pid=${beetpid} -f ${XLOG} &
          else
            echo "To monitor the progress of the acoustic metadata retrieval,"
            echo "examine the extraction log:"
            echo ""
            echo "tail -f ${XLOG}"
          fi
        fi
      fi
      echo ""
      echo "The AcousticBrainz service is depracated and no longer updated."
      echo "To augment acoustic metadata, run '${BOLD}mpplus -X all${NORM}' or"
      echo "'${BOLD}mpplus -X bpm:0${NORM}' after this retrieval is completed"
      echo "==================================================================="
    else
      echo "The 'beet' command is not in your PATH or is not executable."
      echo "Check your MusicPlayerPlus installation."
      echo "Once the 'beet' command is executable and in the execution PATH,"
      echo "Re-run this command."
    fi
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${BLISSIFY}" ] && {
    have_bliss=$(type -p blissify)
    if [ "${have_bliss}" ]
    then
      echo ""
      echo "==========================================================================="
      echo "Performing audio analysis and audio-based information retrieval for media"
      echo "in the Music Player Daemon (MPD) music directory with Blissify."
      echo "The analysis and retrieval can take a minute or so per album."
      echo "A large music library may take several hours to extract."
      echo ""
      echo "The process is performed in the background and non-interactively."
      echo "As long as your computer remains on and connected to the Internet,"
      echo "the process should run uninterrupted and without need for attention."
      echo "You may continue working and leave the extraction unattended."
      echo ""
      MPDLOGDIR="${HOME}/.config/mpd"
      [ -d "${MPDLOGDIR}" ] || mkdir -p "${MPDLOGDIR}"
      XLOG="${MPDLOGDIR}/blissify.log"

      MPD_CONF="${MPDLOGDIR}/mpd.conf"
      mpd_music=$(grep ^music_directory ${MPD_CONF})
      mpd_music=$(echo ${mpd_music} | awk ' { print $2 } ' | sed -e "s/\"//g")
      [ "${mpd_music}" ] || mpd_music="${HOME}/Music"
      # Need to expand the tilda to $HOME
      mpd_music="${mpd_music/#\~/$HOME}"

      [ "${MPD_HOST}" ] || {
        mpd_host=$(grep ^bind_to_address ${MPD_CONF})
        mpd_host=$(echo ${mpd_host} | awk ' { print $2 } ' | sed -e "s/\"//g")
        [ "${mpd_host}" ] || mpd_host="localhost"
        MPD_HOST="${mpd_host}"
      }
      [ "${MPD_PORT}" ] || {
        mpd_port=$(grep ^port ${MPD_CONF})
        mpd_port=$(echo ${mpd_port} | awk ' { print $2 } ' | sed -e "s/\"//g")
        [ "${mpd_port}" ] || mpd_port="6600"
        MPD_PORT="${mpd_port}"
      }
      export MPD_HOST MPD_PORT

      echo "# Extracting audio metadata with Blissify" >> "${XLOG}"
      START_SECONDS=$(date +%s)
      nohup blissify update "${mpd_music}" >> ${XLOG} 2>&1 &
      blisspid=$!
      [ -x ${SCRIPTS}/logtime.sh ] && {
        ${SCRIPTS}/logtime.sh -s "${START_SECONDS}" -l "${XLOG}" \
                  -p "${blisspid}" -d "Blissify acoustic extraction" 2>&1 &
      }
      if [ "${CONSOLE_MODE}" ]
      then
        echo "To monitor the progress of the extraction, examine the extraction log:"
        echo ""
        echo "tail -f ${XLOG}"
      else
        [ "${have_kitty}" ] || [ "${have_gnome}" ] && {
          echo "A terminal window will be opened to monitor the progress of the extraction."
        }
        if [ "${have_kitty}" ]; then
          kitty --title="Blissify Extraction Log" \
                         tail --pid=${blisspid} -f ${XLOG} &
        else
          if [ "${have_gnome}" ]; then
            gnome-terminal --title="Blissify Extraction Log" \
                           --geometry=90x25+50+25 \
                           -- tail --pid=${blisspid} -f ${XLOG} &
          else
            echo "To monitor the progress of the extraction, examine the extraction log:"
            echo ""
            echo "tail -f ${XLOG}"
          fi
        fi
      fi
      echo "==========================================================================="
    else
      echo "The 'blissify' command is not in your PATH or is not executable."
      echo "Check your MusicPlayerPlus installation."
      echo "(Blissify is currently unavailable on Raspberry Pi installs)"
      echo "Once the 'blissify' command is executable and in the execution PATH,"
      echo "Re-run this command."
    fi
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${XTRACTOR}" ] && {
    if [ "${have_beet}" ]
    then
      echo ""
      echo "==========================================================================="
      echo "Performing audio analysis and audio-based information retrieval for media"
      echo "matching '${XTRACTOR}' in the Beets music library management system."
      echo "The analysis and retrieval can take a minute or so per album."
      echo "A large music library may take several hours to extract."
      echo ""
      echo "The process is performed in the background and non-interactively."
      echo "As long as your computer remains on and connected to the Internet,"
      echo "the process should run uninterrupted and without need for attention."
      echo "You may continue working and leave the extraction unattended."
      echo ""
      if [ "${XTRACTOR}" == "all" ]
      then
        extquery=
      else
        extquery="${XTRACTOR}"
      fi
      [ -d "${BEETSLOGDIR}" ] || mkdir -p "${BEETSLOGDIR}"
      XLOG="${BEETSLOGDIR}/xtractor.log"
      echo "# Extracting audio metadata with xtractor plugin" >> "${XLOG}"
      START_SECONDS=$(date +%s)
      nohup beet -v --plugins=xtractor xtractor ${extquery} >> ${XLOG} 2>&1 &
      beetpid=$!
      [ -x ${SCRIPTS}/logtime.sh ] && {
        ${SCRIPTS}/logtime.sh -s "${START_SECONDS}" -l "${XLOG}" \
                              -p "${beetpid}" -d "Acoustic extraction" 2>&1 &
      }
      if [ "${CONSOLE_MODE}" ]
      then
        echo "To monitor the progress of the extraction, examine the extraction log:"
        echo ""
        echo "tail -f ${XLOG}"
      else
        [ "${have_kitty}" ] || [ "${have_gnome}" ] && {
          echo "A terminal window will be opened to monitor the progress of the extraction."
        }
        if [ "${have_kitty}" ]; then
          kitty --title="Beets Extraction Log" tail --pid=${beetpid} -f ${XLOG} &
        else
          if [ "${have_gnome}" ]; then
            gnome-terminal --title="Beets Extraction Log" --geometry=90x25+50+25 \
                           -- tail --pid=${beetpid} -f ${XLOG} &
          else
            echo "To monitor the progress of the extraction, examine the extraction log:"
            echo ""
            echo "tail -f ${XLOG}"
          fi
        fi
      fi
      echo "==========================================================================="
    else
      echo "The 'beet' command is not in your PATH or is not executable."
      echo "Check your MusicPlayerPlus installation."
      echo "Once the 'beet' command is executable and in the execution PATH,"
      echo "Re-run this command."
    fi
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  [ "${BEETS_IMPORT}" ] && {
    if [ -x ${SCRIPTS}/beet_import.sh ]
    then
      echo ""
      echo "===================================================================="
      echo "Importing, tagging, and organizing your music library with the Beets"
      echo "media library management system. A large music library may require"
      echo "several hours to fully complete the import process."
      echo ""
      echo "The import process is performed in the background and non-interactively."
      echo "As long as your computer remains on and connected to the Internet, the"
      echo "import process should run uninterrupted and without need for attention."
      echo "You may continue working and leave the import unattended."
      echo ""

      [ -d "${BEETSLOGDIR}" ] || mkdir -p "${BEETSLOGDIR}"
      if [ "${MUSIC_DIRECTORY}" ]
      then
        nohup ${SCRIPTS}/beet_import.sh ${impflags} -d "${MUSIC_DIRECTORY}" > /dev/null 2>&1 &
      else
        nohup ${SCRIPTS}/beet_import.sh ${impflags} > /dev/null 2>&1 &
      fi
      beetpid=$!
      if [ "${CONSOLE_MODE}" ]
      then
        echo "To monitor the progress of the import, examine the import log:"
        echo ""
        echo "tail -f $BEETSLOGDIR/import_time.log"
      else
        [ "${have_kitty}" ] || [ "${have_gnome}" ] && {
          echo "A terminal window will be opened to monitor the progress of the import."
          echo ""
          echo "Beets log files can be found in $BEETSLOGDIR"
        }
        if [ "${have_kitty}" ]; then
          kitty --title="Beets Import Log" \
                tail --pid=${beetpid} -f ${BEETSLOGDIR}/import_time.log &
        else
          if [ "${have_gnome}" ]; then
            gnome-terminal --title="Beets Import Log" --geometry=90x25+50+25 \
                   -- tail --pid=${beetpid} -f ${BEETSLOGDIR}/import_time.log &
          else
            echo "To monitor the progress of the import, examine the import log:"
            echo ""
            echo "tail -f $BEETSLOGDIR/import_time.log"
          fi
        fi
      fi
      have_ip=$(type -p ip)
      if [ "${have_ip}" ]
      then
        IP=$(ip route get 1.2.3.4 | head -1 | awk '{print $7}')
      else
        have_hostname=$(type -p hostname)
        if [ "${have_hostname}" ]
        then
          IP=$(hostname -I | awk '{print $1}')
        else
          IP="<ip address>"
        fi
      fi
      printf "\n\nWhen the import has completed, "
      printf "visit the Beets web interface at:"
      printf "\n\thttp://${IP}:8337\n"
      echo "===================================================================="
    else
      echo "${SCRIPTS}/beet_import.sh not found or not executable"
      echo "Check your MusicPlayerPlus installation"
      echo ""
      echo "Manual beets import may be required:"
      printf "\n\tbeet import -[w|W] <MUSIC_DIRECTORY>"
      printf "\n\tbeet import -[w|W]ps <MUSIC_DIRECTORY>"
      printf "\nWhere <MUSIC_DIRECTORY> is the full pathname to your music library,"
      printf "\n-w indicates write metadata, -W indicates do not write metadata\n"
    fi
    [ "${DO_NOT_EXIT}" ] || farewell_exit "Exiting MusicPlayerPlus"
    return
  }

  # Check if MPD or Mopidy is active before starting mppcava and mpcplus
  is_running mpd || {
    if systemctl --user is-active navidrome.service >/dev/null 2>&1
    then
      DO_NOT_EXIT=1
      show_main_menu
    else
      printf "\n\nRequired MPD"
      [ "${have_mopidy}" ] && printf " or Mopidy"
      printf " service is not active."
      printf "\nStart the MPD service with the command:"
      printf "\n\tmpplus -M start"
      [ "${have_mopidy}" ] && {
        printf "\nAlternatively, start the Mopidy service with the command:"
        printf "\n\tsystemctl --user start mopidy.service"
      }
      printf "\nRe-run 'mpplus' to start the MPD client and visualizer.\n\n"
      read -p "Press Enter to continue to MusicPlayerPlus menus " yn
      DO_NOT_EXIT=1
      show_main_menu
    fi
  }

  # In fullscreen mode terminals without transparency use tmux
  [ "${FULLSCREEN}" ] && {
    [ "${SIMPLE}" ] && USE_TMUX=1
    [ "${USE_OPAC}" ] || USE_TMUX=1
  }
  # Always use tmux in cool-retro-term
  [ "${RETRO}" ] && USE_TMUX=1

  # Begin visualizer startup section
  #
  # Do not start visualizer here if we are going to start a tmux session,
  # if we are displaying an asciimatics animation, or using cool-retro-term.
  [ "${USE_TMUX}" ] || [ "${SPLASH}" ] || {
    if [ "${FULLSCREEN}" ]
    then
      if [ "${KITTY}" ]
      then
        QRTRHEIGHT=1
        kitty --title "${VTITLE}" \
              --config NONE \
              --start-as fullscreen \
              --override font_size=8 \
              ${KITTY_OPACITY} \
              --override hide_window_decorations=yes \
              --override tab_bar_min_tabs=2 \
              ${VISUALIZER} 2> /dev/null &
      else
        if [ "${TILIX}" ]
        then
          tilix --title="${VTITLE}" \
                --full-screen \
                --window-style=borderless \
                --profile=Visualizer \
                --command="${VISUALIZER}" 2> /dev/null &
        else
          if [ "${GNOME}" ]
          then
            gnome-terminal --title="${VTITLE}" \
                  --profile=Visualizer \
                  --hide-menubar \
                  --full-screen \
                  -- ${VISUALIZER} &
          else
            # No supported terminal emulator available, use tmux
            USE_TMUX=1
          fi
        fi
      fi
      viz_win=
      [ "${HALFHEIGHT}" ] || [ "${QRTRHEIGHT}" ] && {
        [ "${USE_EWMH}" ] && {
          sleep 1
          if [ "${KITTY}" ]
          then
            viz_win=$(wmctrl -l -G -x | grep kitty.kitty | grep "${VTITLE}")
          else
            if [ "${TILIX}" ]
            then
              viz_win=$(wmctrl -l -G -x | grep tilix.Tilix | grep "${VTITLE}")
            else
              if [ "${GNOME}" ]
              then
                viz_win=$(wmctrl -l -G -x | grep gnome-terminal-server | grep "${VTITLE}")
              else
                [ "${SIMPLE}" ] && {
                  viz_win=$(wmctrl -l -G -x | grep st-256color.st-256color | grep "${VTITLE}")
                }
              fi
            fi
          fi
          [ "${viz_win}" ] || {
            if [ "${KITTY}" ]
            then
              viz_win=$(wmctrl -l -G -x | grep kitty.kitty | grep "${VISUALIZER}")
            else
              if [ "${TILIX}" ]
              then
                viz_win=$(wmctrl -l -G -x | grep tilix.Tilix | grep "${VISUALIZER}")
              else
                if [ "${GNOME}" ]
                then
                  viz_win=$(wmctrl -l -G -x | grep gnome-terminal-server | grep "${VISUALIZER}")
                else
                  [ "${SIMPLE}" ] && {
                    viz_win=$(wmctrl -l -G -x | grep st-256color.st-256color | grep "${VISUALIZER}")
                  }
                fi
              fi
            fi
          }
          if [ "${viz_win}" ]
          then
            read -r winid grav xoff yoff width height \
              < <(echo ${viz_win} | awk ' { print $1, $2, $3, $4, $5, $6} ')
            [ "${winid}" ] && {
              if [ "${HALFHEIGHT}" ]
              then
                height=$((height / 2))
              else
                height=$((height / 4))
                # Fudge this to compensate for differing window decoration size
                [ "${TILIX}" ] || height=$((height - 30))
                [ "${KITTY}" ] && height=$((height - 75))
                [ ${height} -lt 70 ] && height=70
              fi
              mvarg="${grav},${xoff},${yoff},${width},${height}"
              wmctrl -i -r "${winid}" -b "remove,fullscreen,maximized_vert"
              wmctrl -i -r "${winid}" -e "${mvarg}"
            }
          else
            echo "Could not find visualizer window"
          fi
        }
      }
    else
      vhit=0
      if [ "${KITTY}" ]
      then
        kitty --title="${VTITLE}" \
              --config NONE \
              --start-as normal \
              --override font_size=8 \
              --override initial_window_width=240c \
              --override initial_window_height=12c \
              --override tab_bar_min_tabs=2 \
              ${KITTY_OPACITY} \
              ${VISUALIZER} 2> /dev/null &
        [ "${USE_EWMH}" ] && {
          sleep 1
          kit_win=$(wmctrl -l -G -x | grep kitty.kitty | grep "${VTITLE}")
          [ "${kit_win}" ] || {
            kit_win=$(wmctrl -l -G -x | grep kitty.kitty | grep "${VISUALIZER}")
          }
          [ "${kit_win}" ] && center_window "${kit_win}" bottom
        }
      else
        if [ "${TILIX}" ]
        then
          tilix --title="${VTITLE}" \
                --window-style=borderless \
                --geometry=390x16+150-0 \
                --profile=Visualizer \
                --command="${VISUALIZER}" 2> /dev/null &
          [ "${USE_EWMH}" ] && {
            sleep 1
            til_win=$(wmctrl -l -G -x | grep tilix.Tilix | grep "${VTITLE}")
            [ "${til_win}" ] || {
              til_win=$(wmctrl -l -G -x | grep tilix.Tilix | grep "${VISUALIZER}")
            }
            [ "${til_win}" ] && center_window "${til_win}" bottom
          }
        else
          if [ "${GNOME}" ]
          then
            gnome-terminal --title="${VTITLE}" \
                  --profile=Visualizer \
                  --hide-menubar \
                  --geometry 390x16+150-0 \
                  -- ${VISUALIZER} &
            [ "${USE_EWMH}" ] && {
              sleep 1
              gno_win=$(wmctrl -l -G -x | grep gnome-terminal-server | grep "${VTITLE}")
              [ "${gno_win}" ] || {
                gno_win=$(wmctrl -l -G -x | grep gnome-terminal-server | grep "${VISUALIZER}")
              }
              [ "${gno_win}" ] && center_window "${gno_win}" bottom
            }
          else
            if [ "${SIMPLE}" ]
            then
              st -t "${VTITLE}" \
                 -g "190x12+50-0" \
                 -f "Monospace:size=12" \
                 ${VISUALIZER} 2> /dev/null &
              [ "${USE_EWMH}" ] && {
                sleep 1
                stl_win=$(wmctrl -l -G -x | grep st-256color.st-256color | grep "${VTITLE}")
                [ "${stl_win}" ] || {
                  stl_win=$(wmctrl -l -G -x | grep st-256color.st-256color | grep "${VISUALIZER}")
                }
                [ "${stl_win}" ] && center_window "${stl_win}" bottom
              }
            else
              # No supported terminal emulator available, use tmux
              USE_TMUX=1
            fi
          fi
        fi
      fi
    fi
  }
  # End visualizer startup section

  # Fullscreen ASCIImatics Animations
  [ "${SPLASH}" ] && FULLSCREEN=1

  if [ "${FULLSCREEN}" ]
  then
    KITTY_OPACITY="--override background_opacity=0.8"
  else
    KITTY_OPACITY="--override background_opacity=1.0"
  fi
  # Set the command to use based on command line switches (-S, -T)
  MPCOMM="${MPCPLUS}"
  if [ "${SPLASH}" ]
  then
    if [ "${TMUX_SPLASH}" ]
    then
      MPCOMM="${MPPSPLASH_TMUX}"
    else
      MPCOMM="${MPPSPLASH}"
    fi
  else
    [ "${USE_TMUX}" ] && {
      if [ "${USE_MPCPLUS}" ]
      then
        MPCOMM="${MPCPLUS_TMUX}"
      else
        MPCOMM="${MPCPLUS_TMUX} -c '${MPCPLUS}'"
      fi
      # No transparency if using tmux
      KITTY_OPACITY="--override background_opacity=1.0"
    }
  fi

  # Begin MPD client startup section
  if [ "${CONSOLE_MODE}" ] || [ "${CURRENT}" ]
  then
    ${MPCOMM}
  else
    if [ "${FULLSCREEN}" ]
    then
      if [ "${KITTY}" ]
      then
        kitty --title="${MTITLE}" \
              --config NONE \
              --start-as fullscreen \
              --override font_size=28 \
              --listen-on unix:${KITTY_SOCKET} \
              --override allow_remote_control=yes \
              ${KITTY_OPACITY} \
              --override tab_bar_min_tabs=2 \
              ${MPCOMM} 2> /dev/null &
      else
        if [ "${TILIX}" ]
        then
          tilix --title="${MTITLE}" \
                --full-screen \
                --window-style=borderless \
                --profile=MusicPlayer \
                --command="${MPCOMM}" 2> /dev/null &
        else
          if [ "${GNOME}" ]
          then
            gnome-terminal --title="${MTITLE}" \
                  --profile=MusicPlayer \
                  --hide-menubar \
                  --full-screen \
                  -- ${MPCOMM} &
          else
            if [ "${SIMPLE}" ]
            then
              st -t "${MTITLE}" \
                 -g "800x600" \
                 -f "Monospace:size=24" \
                 ${MPCOMM} 2> /dev/null &
            else
              if [ "${RETRO}" ]
              then
                cool-retro-term --fullscreen -e ${MPCOMM} > /dev/null 2>&1 &
              else
                ${MPCOMM}
              fi
            fi
          fi
        fi
      fi
    else
      if [ "${KITTY}" ]
      then
        kitty --title="${MTITLE}" \
              --config NONE \
              --start-as normal \
              --listen-on unix:${KITTY_SOCKET} \
              --override allow_remote_control=yes \
              --override font_size=28 \
              --override initial_window_width=92c \
              --override initial_window_height=26c \
              --override tab_bar_min_tabs=2 \
              ${KITTY_OPACITY} \
              ${MPCOMM} 2> /dev/null &
        [ "${USE_EWMH}" ] && {
          sleep 1
          mpc_win=$(wmctrl -l -G -x | grep kitty.kitty | grep -v "${VTITLE}" | grep "${MTITLE}")
          [ "${mpc_win}" ] || {
            mpc_win=$(wmctrl -l -G -x | grep kitty.kitty | grep -v "${VISUALIZER}" | grep "${MPCOMM}")
          }
          [ "${mpc_win}" ] && center_window "${mpc_win}" "${vhit}"
        }
      else
        if [ "${TILIX}" ]
        then
          tilix --title="${MTITLE}" \
                --window-style=borderless \
                --geometry=80x20+150+25 \
                --profile=MusicPlayer \
                --command="${MPCOMM}" 2> /dev/null &
          [ "${USE_EWMH}" ] && {
            sleep 1
            til_win=$(wmctrl -l -G -x | grep tilix.Tilix | grep -v "${VTITLE}" | grep "${MTITLE}")
            [ "${til_win}" ] || {
              til_win=$(wmctrl -l -G -x | grep tilix.Tilix | grep -v "${VISUALIZER}" | grep "${MPCOMM}")
            }
            [ "${til_win}" ] && center_window "${til_win}" "${vhit}"
          }
        else
          if [ "${GNOME}" ]
          then
            gnome-terminal --title="${MTITLE}" \
                  --profile=MusicPlayer \
                  --hide-menubar \
                  --geometry=80x20+150+25 \
                  -- ${MPCOMM} &
            [ "${USE_EWMH}" ] && {
              sleep 1
              gno_win=$(wmctrl -l -G -x | grep gnome-terminal-server | grep -v "${VTITLE}" | grep "${MTITLE}")
              [ "${gno_win}" ] || {
                gno_win=$(wmctrl -l -G -x | grep gnome-terminal-server | grep -v "${VISUALIZER}" | grep "${MPCOMM}")
              }
              [ "${gno_win}" ] && center_window "${gno_win}" "${vhit}"
            }
          else
            if [ "${SIMPLE}" ]
            then
              st -t "${MTITLE}" \
                 -g "100x26+50+25" \
                 -f "Monospace:size=24" \
                 ${MPCOMM} 2> /dev/null &
              [ "${USE_EWMH}" ] && {
                sleep 1
                stl_win=$(wmctrl -l -G -x | grep st-256color.st-256color | grep -v "${VTITLE}" | grep "${MTITLE}")
                [ "${stl_win}" ] || {
                  stl_win=$(wmctrl -l -G -x | grep st-256color.st-256color | grep -v "${VISUALIZER}" | grep "${MPCOMM}")
                }
                [ "${stl_win}" ] && center_window "${stl_win}" "${vhit}"
              }
            else
              if [ "${RETRO}" ]
              then
                cool-retro-term -e ${MPCOMM} > /dev/null 2>&1 &
              else
                ${MPCOMM} &
                # TODO: handle other graphical mpd clients
                [ "${MPCOMM}" == "cantata" ] && [ "${USE_EWMH}" ] && {
                  sleep 1
                  can_win=$(wmctrl -l -G -x | grep cantata.cantata | grep "Cantata")
                  [ "${can_win}" ] || {
                    can_win=$(wmctrl -l -G -x | grep cantata.cantata | grep -i "cantata")
                  }
                  [ "${can_win}" ] && center_window "${can_win}" "top"
                }
              fi
            fi
          fi
        fi
      fi
    fi
  fi
  # End MPD client startup section
}

select_font() {
  # Array with font names
  fonts=("Bolger" "Graceful" "Lean" "Shadow" "Slant" "Small" "Speed" "Standard" "Varsity")

  # Seed random generator
  RANDOM=$$$(date +%s)

  if [ "$1" == "small" ]
  then
    USE_FONT=Small
  else
    USE_FONT=${fonts[ $RANDOM % ${#fonts[@]} ]}
  fi
  [ "${USE_FONT}" == "Lean" ] && {
    [ "${FULLSCREEN}" ] || {
      while [ "${USE_FONT}" == "Lean" ]
      do
        USE_FONT=${fonts[ $RANDOM % ${#fonts[@]} ]}
      done
    }
  }
  [ -r "${FIG_FONTS}/${USE_FONT}.flf" ] || {
    if [ -r "${FIG_FONTS}/Standard.flf" ]
    then
      USE_FONT="Standard"
    else
      USE_FONT="standard"
    fi
  }
}

do_service_action() {
  local service="$1"
  local action="$2"
  case ${action} in
    alsaconf)
      sudo alsa_conf -e -m
      ;;
    start)
      systemctl --user is-active ${service} >/dev/null 2>&1 || {
        systemctl --user ${action} ${service}
      }
      [ "${service}" == "mopidy.service" ] && {
        # Perform a local scan of the music library
        have_mopidy=$(type -p mopidy)
        [ "${have_mopidy}" ] && mopidy local scan > /dev/null 2>&1 &
        # Reconfigure mpcplus/mppcava with Mopidy visualizer data source
        [ -x ${SCRIPTS}/viz_data_src.sh ] && ${SCRIPTS}/viz_data_src.sh mopidy
      }
      [ "${service}" == "mpd.service" ] && {
        # Update the MPD library database
        [ "${have_mpc}" ] && mpc update --quiet > /dev/null 2>&1 &
        # Reconfigure mpcplus/mppcava with MPD visualizer data source
        [ -x ${SCRIPTS}/viz_data_src.sh ] && ${SCRIPTS}/viz_data_src.sh mpd
      }
      ;;
    stop)
      systemctl --user is-active ${service} >/dev/null 2>&1 && {
        systemctl --user ${action} ${service}
      }
      [ "${service}" == "mpd.service" ] && {
        systemctl --user is-active mpd.socket >/dev/null 2>&1 && {
          systemctl --user ${action} mpd.socket
        }
      }
      [ "${service}" == "pipewire.service" ] && {
        systemctl --user is-active pipewire.socket >/dev/null 2>&1 && {
          systemctl --user ${action} pipewire.socket
        }
      }
      [ "${service}" == "pulseaudio.service" ] && {
        systemctl --user is-active pulseaudio.socket >/dev/null 2>&1 && {
          systemctl --user ${action} pulseaudio.socket
        }
      }
      ;;
    disable)
      systemctl --user is-enabled ${service} >/dev/null 2>&1 && {
        systemctl --user ${action} ${service}
      }
      [ "${service}" == "mpd.service" ] && {
        systemctl --user is-enabled mpd.socket >/dev/null 2>&1 && {
          systemctl --user ${action} mpd.socket
        }
        sudo systemctl --user --global disable mpd.socket
      }
      [ "${service}" == "pipewire.service" ] && {
        systemctl --user is-enabled pipewire.socket >/dev/null 2>&1 && {
          systemctl --user ${action} pipewire.socket
        }
        sudo systemctl --user --global disable pipewire.socket
      }
      [ "${service}" == "pulseaudio.service" ] && {
        systemctl --user is-enabled pulseaudio.socket >/dev/null 2>&1 && {
          systemctl --user ${action} pulseaudio.socket
        }
        sudo systemctl --user --global disable pulseaudio.socket
      }
      ;;
    enable)
      systemctl --user is-enabled ${service} >/dev/null 2>&1 || {
        systemctl --user ${action} ${service}
      }
      [ "${service}" == "mopidy.service" ] && {
        # Perform a local scan of the music library
        have_mopidy=$(type -p mopidy)
        [ "${have_mopidy}" ] && mopidy local scan > /dev/null 2>&1 &
        # Reconfigure mpcplus/mppcava with Mopidy visualizer data source
        [ -x ${SCRIPTS}/viz_data_src.sh ] && ${SCRIPTS}/viz_data_src.sh mopidy
      }
      [ "${service}" == "mpd.service" ] && {
        # Update the MPD library database
        [ "${have_mpc}" ] && mpc update --quiet > /dev/null 2>&1 &
        # Reconfigure mpcplus/mppcava with MPD visualizer data source
        [ -x ${SCRIPTS}/viz_data_src.sh ] && ${SCRIPTS}/viz_data_src.sh mpd
      }
      ;;
    restart)
      systemctl --user ${action} ${service}
      [ "${service}" == "mopidy.service" ] && {
        # Perform a local scan of the music library
        have_mopidy=$(type -p mopidy)
        [ "${have_mopidy}" ] && mopidy local scan > /dev/null 2>&1 &
      }
      [ "${service}" == "mpd.service" ] && {
        # Update the MPD library database
        [ "${have_mpc}" ] && mpc update --quiet > /dev/null 2>&1 &
      }
      ;;
    status)
      systemctl --user --full ${action} ${service}
      ;;
    *)
      echo "Unrecognized service action: ${action}"
      ;;
  esac
}

mpp_service() {
  ALL_SERVICES="navidrome mopidy mpdstats webplugin yams mpd pipewire pulseaudio"
  SERVICE_ACTION=$1
  if [ "$2" == "ALL" ]
  then
    for srvc in ${ALL_SERVICES}
    do
      SERVICE="${srvc}.service"
      do_service_action "${SERVICE}" "${SERVICE_ACTION}"
    done
  else
    SERVICE=${2}.service
    do_service_action "${SERVICE}" "${SERVICE_ACTION}"
  fi
}

show_menu_title() {
  columns="$(tput cols)"
  menu_title="$1"
  if [ "${have_lolcat}" ]
  then
    printf "%*s\n" $(( (${#menu_title} + columns) / 2)) "${menu_title}" | lolcat
  else
    printf "%*s\n" $(( (${#menu_title} + columns) / 2)) "${menu_title}"
  fi
}

show_figlet() {
  FIG_TEXT="$1"
  select_font small
  if [ "${have_lolcat}" ]
  then
    if [ "${USE_FONT}" == "Lean" ]
    then
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT} | tr ' _/' ' ()' | lolcat
    else
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT} | lolcat
    fi
  else
    if [ "${USE_FONT}" == "Lean" ]
    then
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT} | tr ' _/' ' ()'
    else
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT}
    fi
  fi
}

# Display a heading with rich-cli, figlet, or printf
heading() {
  if [ "${have_rich}" ]; then
    rich "[cyan]$1[/cyan]" -p -a rounded -c -C
  else
    if [ "${use_figlet}" ]; then
      show_figlet "$2"
    else
      show_menu_title "$1"
    fi
  fi
}

show_full_status() {
  clear_screen
  printf "\n"
  heading "MusicPlayerPlus Services Status" "Services Status"
  show_system_status full
  printf "\n"
}

show_help_menu() {
  MTITLE="MusicPlayerPlus Help"
  while true
  do
    clear_screen
    heading "MusicPlayerPlus Help Menu" "Help Menu"
    PS3="${BOLD}${PLEASE} choice (numeric or text): ${NORM}"
    options=()
    options+=("MusicPlayerPlus README")
    options+=("MusicPlayerPlus Man Page")
    options+=("MusicPlayerPlus Animation Man Page")
    options+=("ASCIInema Man Page")
    options+=("Julia Set Animation Man Page")
    options+=("MusicPlayer Animation Man Page")
    options+=("ASCII Splash Man Page")
    options+=("ASCII Splash Tmux Man Page")
    options+=("Alsa Conf Man Page")
    options+=("Beet Man Page")
    options+=("Create Playlist Man Page")
    options+=("Bandcamp Download Man Page")
    options+=("Soundcloud Download Man Page")
    options+=("Fzmp Man Page")
    options+=("Listyt Man Page")
    options+=("Mpcplus-tmux Man Page")
    options+=("Mpcplus Man Page")
    options+=("Mpcpluskeys Man Page")
    options+=("Mpd-configure Man Page")
    options+=("Mpd-monitor Man Page")
    options+=("Mppcava Man Page")
    options+=("Mppinit Man Page")
    options+=("Mppjulia Man Page")
    options+=("Mpplus Man Page")
    options+=("Mppplasma Man Page")
    options+=("Mpprocks Man Page")
    options+=("Mppsplash-tmux Man Page")
    options+=("Mppsplash Man Page")
    options+=("Beetsconfig Man Page")
    options+=("Tmux Multiplexer Man Page")
    [ "${have_lynx}" ] && options+=("Lynx Web Browser Man Page")
    [ "${have_w3m}" ] && options+=("W3m Web Browser Man Page")
    [ "${have_retro}" ] && options+=("Retro Terminal Man Page")
    [ "${have_gnome}" ] && options+=("Gnome Terminal Man Page")
    [ "${have_kitty}" ] && options+=("Kitty Terminal Man Page")
    [ "${have_simple}" ] && options+=("Simple Terminal Man Page")
    [ "${have_tilix}" ] && options+=("Tilix Terminal Man Page")
    options+=("Done / Back  [b]" "Quit         [q]")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
        "Done"*,*|*,"Done"*|"done"*,*|*,"done"*|"Back"*,*|*,"Back"*|"back"*,*|*,"back"*|"b",*|*,"b")
          clear_screen
          printf "\n"
          break 2
          ;;
        "MusicPlayerPlus README",*|*,"MusicPlayerPlus README")
          if [ "${have_w3m}" ]
          then
            w3m ${DOC_DIR}/README.html
          else
            if [ "${have_lynx}" ]
            then
              lynx ${DOC_DIR}/README.html
            else
              less ${DOC_DIR}/README.md
            fi
          fi
          break
          ;;
        "MusicPlayerPlus Man"*,*|*,"MusicPlayerPlus Man"*)
          man mpplus
          break
          ;;
        "MusicPlayerPlus Animation"*,*|*,"MusicPlayerPlus Animation"*)
          man mpprocks
          break
          ;;
        "ASCIInema"*,*|*,"ASCIInema"*)
          man asciinema
          break
          ;;
        "ASCII Splash Tmux"*,*|*,"ASCII Splash Tmux"*)
          man mppsplash-tmux
          break
          ;;
        "ASCII Splash"*,*|*,"ASCII Splash"*)
          man mppsplash
          break
          ;;
        "Alsa Conf"*,*|*,"Alsa Conf"*)
          man alsa_conf
          break
          ;;
        "Beet"*,*|*,"Beet"*)
          man beet
          break
          ;;
        "Beetsconfig"*,*|*,"Beetsconfig"*)
          man beetsconfig
          break
          ;;
        "Create Playlist"*,*|*,"Create Playlist"*)
          man create_playlist
          break
          ;;
        "Bandcamp"*,*|*,"Bandcamp"*)
          man bandcamp-dl
          break
          ;;
        "Soundcloud"*,*|*,"Soundcloud"*)
          man scdl
          break
          ;;
        "Fzmp"*,*|*,"Fzmp"*)
          man fzmp
          break
          ;;
        "Listyt"*,*|*,"Listyt"*)
          man listyt
          break
          ;;
        "Mpcplus-tmux"*,*|*,"Mpcplus-tmux"*)
          man mpcplus-tmux
          break
          ;;
        "Mpcplus"*,*|*,"Mpcplus"*)
          man mpcplus
          break
          ;;
        "Mpcpluskeys"*,*|*,"Mpcpluskeys"*)
          man mpcpluskeys
          break
          ;;
        "Mpd-configure"*,*|*,"Mpd-configure"*)
          man mpd-configure
          break
          ;;
        "Mpd-monitor"*,*|*,"Mpd-monitor"*)
          man mpd-monitor
          break
          ;;
        "Mppcava"*,*|*,"Mppcava"*)
          man mppcava
          break
          ;;
        "Mppinit"*,*|*,"Mppinit"*)
          man mppinit
          break
          ;;
        "Mppjulia"*,*|*,"Mppjulia"*)
          man mppjulia
          break
          ;;
        "Mppplasma"*,*|*,"Mppplasma"*)
          man mppplasma
          break
          ;;
        "Mpprocks"*,*|*,"Mpprocks"*)
          man mpprocks
          break
          ;;
        "Mpplus"*,*|*,"Mpplus"*)
          man mpplus
          break
          ;;
        "Mppsplash-tmux"*,*|*,"Mppsplash-tmux"*)
          man mppsplash-tmux
          break
          ;;
        "Mppsplash"*,*|*,"Mppsplash"*)
          man mppsplash
          break
          ;;
        "Tmux"*,*|*,"Tmux"*)
          man tmux
          break
          ;;
        "Lynx"*,*|*,"Lynx"*)
          man lynx
          break
          ;;
        "W3m"*,*|*,"W3m"*)
          man w3m
          break
          ;;
        "Retro"*,*|*,"Retro"*)
          man cool-retro-term
          break
          ;;
        "Gnome"*,*|*,"Gnome"*)
          man gnome-terminal
          break
          ;;
        "Kitty"*,*|*,"Kitty"*)
          man kitty
          break
          ;;
        "Simple"*,*|*,"Simple"*)
          man st
          break
          ;;
        "Tilix"*,*|*,"Tilix"*)
          man tilix
          break
          ;;
        "Quit",*|*,"Quit"|"quit",*|*,"quit"|"q",*|*,"q")
          farewell_exit "Exiting MusicPlayerPlus"
          ;;
        *,*|*,*)
          printf "\nCould not match '${REPLY}' with a menu entry."
          printf "\nPlease try again with an exact match.\n"
          ;;
      esac
      REPLY=
    done
  done
  clear_screen
  printf "\n"
}

show_downloads_menu() {
  while true
  do
    clear_screen
    heading "MusicPlayerPlus Downloads Menu" "Downloads"
    if [ "${dryrun}" ]
    then
      usedrun="(ON) "
    else
      usedrun="(OFF)"
    fi
    skip_it_so=
    PS3="${BOLD}${PLEASE} command choice (numeric or text, 'h' for help): ${NORM}"
     options=("Download Album Cover Art    [a]")
    options+=("Download Bandcamp Songs     [b]")
    options+=("Download Soundcloud Songs   [s]")
    options+=("Download YouTube Songs      [y]")
    options+=("Download Audio in URL       [A]")
    options+=("List YouTube Playlists      [p]")
    options+=("List YouTube Uploads        [u]")
    options+=("List YouTube URL            [U]")
    [ "${DISCOGS_USER}" ] && [ "${DISCOGS_TOKEN}" ] && {
      options+=("Markdown from Discogs       [d]")
      options+=("Markdown from Local Library [l]")
      DISCOGS_DIR="${DISCOGS_DIR/#\~/$HOME}"
      [ -d "${DISCOGS_DIR}" ] && {
        options+=("Discogs Collection Markdown [D]")
      }
      options+=("Toggle Dry Run        ${usedrun} [t]")
    }
    options+=("Main menu                   [m]")
    options+=("Quit                        [q]")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear_screen
              printf "\n"
              show_help_menu
              break
              ;;
          "Main menu"*,*|*,"Main menu"*|"Back",*|*,"Back"|"back",*|*,"back"|"m",*|*,"m")
              clear_screen
              printf "\n"
              init_vars
              show_main_menu
              break 2
              ;;
          "Download Album"*,*|*,"Download Album"*|"a",*|*,"a")
              DOWNLOAD_ART=1
              break
              ;;
          "Download Bandcamp"*,*|*,"Download Bandcamp"*|"b",*|*,"b")
              DOWNLOAD_BANDCAMP=1
              break
              ;;
          "Download Soundcloud"*,*|*,"Download Soundcloud"*|"s",*|*,"s")
              DOWNLOAD_SOUNDCLOUD=1
              break
              ;;
          "Download YouTube"*,*|*,"Download YouTube"*|"y",*|*,"y")
              DOWNLOAD_YOUTUBE=1
              break
              ;;
          "Download Audio"*,*|*,"Download Audio"*|"A",*|*,"A")
              DOWNLOAD_YOUTUBE=1
              break
              ;;
          "List YouTube Playlists"*,*|*,"List YouTube Playlists"*|"p",*|*,"p")
              LIST_YT_PLAYLISTS=1
              break
              ;;
          "List YouTube Uploads"*,*|*,"List YouTube Uploads"*|"u",*|*,"u")
              LIST_YT_UPLOADS=1
              break
              ;;
          "List YouTube URL"*,*|*,"List YouTube URL"*|"U",*|*,"U")
              LIST_YT_URL=1
              break
              ;;
          "Markdown from Discogs"*,*|*,"Markdown from Discogs"*|"d",*|*,"d")
              DOWNLOAD_DISCOGS=1
              break
              ;;
          "Markdown from Local"*,*|*,"Markdown from Local"*|"l",*|*,"l")
              DOWNLOAD_LOCAL=1
              break
              ;;
          "Discogs Collection"*,*|*,"Discogs Collection"*|"D",*|*,"D")
              select_vault_dir
              break
              ;;
          "Toggle Dry Run"*,*|*,"Toggle Dry Run"*|"t",*|*,"t")
              if [ "${dryrun}" ]
              then
                dryrun=
              else
                dryrun="-n"
              fi
              skip_it_so=1
              break
              ;;
          "Quit"*,*|*,"Quit"*|"quit",*|*,"quit"|"q",*|*,"q")
              farewell_exit "Exiting MusicPlayerPlus"
              ;;
          *,*|*,*)
              skip_it_so=1
              break
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
}

show_system_status() {
  full=
  [ "$1" == "full" ] && full=1
  systemctl --user is-active mpd.service >/dev/null 2>&1 && \
    m_active="active" || m_active="inactive"
  systemctl --user is-enabled mpd.service >/dev/null 2>&1 && \
    m_enabled="enabled " || m_enabled="disabled"
  systemctl --user is-active pipewire.service >/dev/null 2>&1 && \
    i_active="active" || i_active="inactive"
  systemctl --user is-enabled pipewire.service >/dev/null 2>&1 && \
    i_enabled="enabled " || i_enabled="disabled"
  systemctl --user is-active pulseaudio.service >/dev/null 2>&1 && \
    p_active="active" || p_active="inactive"
  systemctl --user is-enabled pulseaudio.service >/dev/null 2>&1 && \
    p_enabled="enabled " || p_enabled="disabled"
  systemctl --user is-active mpdstats.service >/dev/null 2>&1 && \
    s_active="active" || s_active="inactive"
  systemctl --user is-enabled mpdstats.service >/dev/null 2>&1 && \
    s_enabled="enabled " || s_enabled="disabled"
  systemctl --user is-active webplugin.service >/dev/null 2>&1 && \
    w_active="active" || w_active="inactive"
  systemctl --user is-enabled webplugin.service >/dev/null 2>&1 && \
    w_enabled="enabled " || w_enabled="disabled"
  systemctl --user is-active yams.service >/dev/null 2>&1 && \
    y_active="active" || y_active="inactive"
  systemctl --user is-enabled yams.service >/dev/null 2>&1 && \
    y_enabled="enabled " || y_enabled="disabled"
  systemctl --user is-active mopidy.service >/dev/null 2>&1 && \
    z_active="active" || z_active="inactive"
  systemctl --user is-enabled mopidy.service >/dev/null 2>&1 && \
    z_enabled="enabled " || z_enabled="disabled"
  systemctl --user is-active navidrome.service >/dev/null 2>&1 && \
    n_active="active" || n_active="inactive"
  systemctl --user is-enabled navidrome.service >/dev/null 2>&1 && \
    n_enabled="enabled " || n_enabled="disabled"
  if [ "${have_navi}" ]
  then
    n_inst="installed"
  else
    n_inst="not installed"
  fi
  if [ "${have_mopidy}" ]
  then
    z_inst="installed"
  else
    z_inst="not installed"
  fi
  if [ "${m_enabled}" == "enabled " ]; then
    ecol="green"
  else
    ecol="red"
  fi
  if [ "${m_active}" == "active" ]; then
    acol="green"
  else
    acol="red"
  fi
  [ "${full}" ] || [ "${m_enabled}" == "enabled " ] || [ "${m_active}" == "active" ] && {
    if [ "${have_rich}" ]; then
      rich "[yellow]Music Player Daemon[/] (MPD):  [${ecol}]${m_enabled}[/] and [${acol}]${m_active}[/]" -p
    else
      printf "\nMusic Player Daemon:        ${m_enabled} and ${m_active}"
    fi
  }
  if [ "${i_enabled}" == "enabled " ]; then
    ecol="green"
  else
    ecol="red"
  fi
  if [ "${i_active}" == "active" ]; then
    acol="green"
  else
    acol="red"
  fi
  [ "${full}" ] || [ "${i_enabled}" == "enabled " ] || [ "${i_active}" == "active" ] && {
    if [ "${have_rich}" ]; then
      rich "[yellow]PipeWire[/]:                   [${ecol}]${i_enabled}[/] and [${acol}]${i_active}[/]" -p
    else
      printf "\nPipeWire:                   ${i_enabled} and ${i_active}"
    fi
  }
  if [ "${p_enabled}" == "enabled " ]; then
    ecol="green"
  else
    ecol="red"
  fi
  if [ "${p_active}" == "active" ]; then
    acol="green"
  else
    acol="red"
  fi
  [ "${full}" ] || [ "${p_enabled}" == "enabled " ] || [ "${p_active}" == "active" ] && {
    if [ "${have_rich}" ]; then
      rich "[yellow]PulseAudio[/]:                 [${ecol}]${p_enabled}[/] and [${acol}]${p_active}[/]" -p
    else
      printf "\nPulseAudio:                 ${p_enabled} and ${p_active}"
    fi
  }
  if [ "${s_enabled}" == "enabled " ]; then
    ecol="green"
  else
    ecol="red"
  fi
  if [ "${s_active}" == "active" ]; then
    acol="green"
  else
    acol="red"
  fi
  [ "${full}" ] || [ "${s_enabled}" == "enabled " ] || [ "${s_active}" == "active" ] && {
    if [ "${have_rich}" ]; then
      rich "[yellow]Beets MPD Stats[/]:            [${ecol}]${s_enabled}[/] and [${acol}]${s_active}[/]" -p
    else
      printf "\nBeets MPD Stats:            ${s_enabled} and ${s_active}"
    fi
  }
  if [ "${w_enabled}" == "enabled " ]; then
    ecol="green"
  else
    ecol="red"
  fi
  if [ "${w_active}" == "active" ]; then
    acol="green"
  else
    acol="red"
  fi
  [ "${full}" ] || [ "${w_enabled}" == "enabled " ] || [ "${w_active}" == "active" ] && {
    if [ "${have_rich}" ]; then
      rich "[yellow]Beets Web[/]:                  [${ecol}]${w_enabled}[/] and [${acol}]${w_active}[/]" -p
    else
      printf "\nBeets Web:                  ${w_enabled} and ${w_active}"
    fi
  }
  if [ "${y_enabled}" == "enabled " ]; then
    ecol="green"
  else
    ecol="red"
  fi
  if [ "${y_active}" == "active" ]; then
    acol="green"
  else
    acol="red"
  fi
  [ "${full}" ] || [ "${y_enabled}" == "enabled " ] || [ "${y_active}" == "active" ] && {
    if [ "${have_rich}" ]; then
      rich "[yellow]Last.fm Scrobbler[/]:          [${ecol}]${y_enabled}[/] and [${acol}]${y_active}[/]" -p
    else
      printf "\nLast.fm Scrobbler:          ${y_enabled} and ${y_active}"
    fi
  }
  if [ "${z_enabled}" == "enabled " ]; then
    ecol="green"
  else
    ecol="red"
  fi
  if [ "${z_active}" == "active" ]; then
    acol="green"
  else
    acol="red"
  fi
  if [ "${z_inst}" == "installed" ]; then
    icol="green"
  else
    icol="red"
  fi
  [ "${full}" ] || [ "${z_enabled}" == "enabled " ] || [ "${z_active}" == "active" ] && {
    if [ "${have_rich}" ]; then
      rich "[yellow]Mopidy Server[/]:              [${ecol}]${z_enabled}[/] and [${acol}]${z_active}[/] ([${icol}]${z_inst})[/] " -p
    else
      printf "\nMopidy Server:              ${z_enabled} and ${z_active} (${z_inst})"
    fi
  }
  if [ "${n_enabled}" == "enabled " ]; then
    ecol="green"
  else
    ecol="red"
  fi
  if [ "${n_active}" == "active" ]; then
    acol="green"
  else
    acol="red"
  fi
  if [ "${n_inst}" == "installed" ]; then
    icol="green"
  else
    icol="red"
  fi
  [ "${full}" ] || [ "${n_enabled}" == "enabled " ] || [ "${n_active}" == "active" ] && {
    if [ "${have_rich}" ]; then
      rich "[yellow]Navidrome Server[/]:           [${ecol}]${n_enabled}[/] and [${acol}]${n_active}[/] ([${icol}]${n_inst})[/] " -p
    else
      printf "\nNavidrome Server:           ${n_enabled} and ${n_active} (${n_inst})"
    fi
  }
  [ "${have_rich}" ] || printf "\n"
}

show_about() {
  [ "${have_gum}" ] && [ "${have_figlet}" ] && [ "${have_mppanim}" ] && {
    mppanim -a -q
    [ $? -eq 0 ] || tput cup 0 0 2>/dev/null
    sleep 3
  }
  if [ -f "${MPP_DIR}/VERSION" ]; then
    . "${MPP_DIR}/VERSION"
    MPP_VER=${VERSION}
    MPP_REL=${RELEASE}
    mp_versrel="Version ${MPP_VER} Release ${MPP_REL}"
  else
    mp_versrel="Unknown Version"
  fi
  [ -f "${MPPCONF}" ] && . "${MPPCONF}"
  clear_screen
  R_URL="https://github.com/doctorfree/MusicPlayerPlus"
  W_URL="https://github.com/doctorfree/MusicPlayerPlus/wiki"
  heading "About MusicPlayerPlus ${mp_versrel}" "About ${mp_versrel}"
  printf "\n"
  if [ "${have_rich}" ]; then
    rich "[cyan]MusicPlayerPlus[/] is an open source command line suite of utilities to manage" -p
    rich "a character-based console and terminal window music player, music library," -p
    rich "and services including MPD, Beets, Mopidy, Navidrome, Yams, and YouTube." -p
    printf "\n"
    rich "[cyan]MusicPlayerPlus[/] is written in [yellow]Bash[/] and [yellow]Python[/] by Ronald Record." -p
    printf "\n"
    rich "[magenta]MusicPlayerPlus Repo[/]: [link=${R_URL}#readme][yellow]${R_URL}[/yellow][/link]" -p
    rich "[magenta]MusicPlayerPlus Wiki[/]: [link=${W_URL}][yellow]${W_URL}[/yellow][/link]" -p
  else
    printf "\n'MusicPlayerPlus' is an open source command line suite of utilities to manage"
    printf "\na character-based console and terminal window music player, music library,"
    printf "\nand services including MPD, Beets, Mopidy, Navidrome, Yams, and YouTube.\n"
    printf "\n'MusicPlayerPlus' is written in 'Bash' and 'Python' by Ronald Record.\n"
    printf "\nMusicPlayerPlus Repo: ${R_URL}"
    printf "\nMusicPlayerPlus Wiki: ${W_URL}\n"
  fi
}

show_info() {
  if [ -f "${MPP_DIR}/VERSION" ]; then
    . "${MPP_DIR}/VERSION"
    MPP_VER=${VERSION}
    MPP_REL=${RELEASE}
    mp_versrel="Version ${MPP_VER} Release ${MPP_REL}"
  else
    mp_versrel="Unknown Version"
  fi
  [ -f "${MPPCONF}" ] && . "${MPPCONF}"
  clear_screen
  heading "MusicPlayerPlus ${mp_versrel}" "${mp_versrel}"
  if [ "${have_rich}" ]; then
    if [ "${MUSIC_DIR}" ]; then
      rich "[yellow]Music Folder[/]:           [green]${MUSIC_DIR}[/]" -p
    else
      rich "[cyan]Music Folder[/]:           [red][Not Set][/]" -p
    fi
    if [ "${MPD_CLIENT}" ]; then
      rich "[yellow]MPD Client[/]:             [green]${MPD_CLIENT}[/]" -p
    else
      rich "[cyan]MPD Client[/]:             [red][Not Set][/]" -p
    fi
    if [ "${BANDCAMP_USER}" ]; then
      rich "[yellow]Bandcamp User[/]:          [green]${BANDCAMP_USER}[/]" -p
    else
      rich "[cyan]Bandcamp User[/]:          [red][Not Set][/]" -p
    fi
    if [ "${DISCOGS_USER}" ]; then
      rich "[yellow]Discogs User[/]:           [green]${DISCOGS_USER}[/]" -p
    else
      rich "[cyan]Discogs User[/]:           [red][Not Set][/]" -p
    fi
    if [ "${DISCOGS_TOKEN}" ]; then
      rich "[yellow]Discogs Token[/]:          [green][Set][/]" -p
    else
      rich "[cyan]Discogs Token[/]:          [red][Not Set][/]" -p
    fi
    if [ "${DISCOGS_DIR}" ]; then
      rich "[yellow]Discogs Folder[/]:         [green]${DISCOGS_DIR}[/]" -p
    else
      rich "[cyan]Discogs Folder[/]:         [red][Not Set][/]" -p
    fi
    if [ "${LASTFM_USER}" ]; then
      rich "[yellow]Last.fm User[/]:           [green]${LASTFM_USER}[/]" -p
    else
      rich "[cyan]Last.fm User[/]:           [red][Not Set][/]" -p
    fi
    if [ "${LASTFM_APIKEY}" ]; then
      rich "[yellow]Last.fm API Key[/]:        [green][Set][/]" -p
    else
      rich "[cyan]Last.fm API Key[/]:        [red][Not Set][/]" -p
    fi
    if [ "${LASTFM_SECRET}" ]; then
      rich "[yellow]Last.fm API Secret[/]:     [green][Set][/]" -p
    else
      rich "[cyan]Last.fm API Secret[/]:     [red][Not Set][/]" -p
    fi
    if [ "${SOUNDCLOUD_SLUG}" ]; then
      rich "[yellow]Soundcloud Slug[/]:        [green]${SOUNDCLOUD_SLUG}[/]" -p
    else
      rich "[cyan]Soundcloud Slug[/]:        [red][Not Set][/]" -p
    fi
    if [ "${SPOTIFY_CLIENT}" ]; then
      rich "[yellow]Spotify Client[/]:         [green][Set][/]" -p
    else
      rich "[cyan]Spotify Client[/]:         [red][Not Set][/]" -p
    fi
    if [ "${SPOTIFY_SECRET}" ]; then
      rich "[yellow]Spotify Secret[/]:         [green][Set][/]" -p
    else
      rich "[cyan]Spotify Secret[/]:         [red][Not Set][/]" -p
    fi
    if [ "${YOUTUBE_APIKEY}" ]; then
      rich "[yellow]YouTube API Key[/]:        [green][Set][/]" -p
    else
      rich "[cyan]YouTube API Key[/]:        [red][Not Set][/]" -p
    fi
  else
    if [ "${MUSIC_DIR}" ]; then
      printf "\nMusic Folder:\t${MUSIC_DIR}"
    else
      printf "\nMusic Folder:\t[Not Set]"
    fi
    if [ "${MPD_CLIENT}" ]; then
      printf "\nMPD Client:\t${MPD_CLIENT}"
    else
      printf "\nMPD Client:\t[Not Set]"
    fi
    if [ "${BANDCAMP_USER}" ]; then
      printf "\nBandcamp User:\t${BANDCAMP_USER}"
    else
      printf "\nBandcamp User:\t[Not Set]"
    fi
    if [ "${DISCOGS_USER}" ]; then
      printf "\nDiscogs User:\t${DISCOGS_USER}"
    else
      printf "\nDiscogs User:\t[Not Set]"
    fi
    if [ "${DISCOGS_TOKEN}" ]; then
      printf "\nDiscogs Token:\t[Set]"
    else
      printf "\nDiscogs Token:\t[Not Set]"
    fi
    if [ "${DISCOGS_DIR}" ]; then
      printf "\nDiscogs Folder:\t${DISCOGS_DIR}"
    else
      printf "\nDiscogs Folder:\t[Not Set]"
    fi
    if [ "${LASTFM_USER}" ]; then
      printf "\nLast.fm User:\t${LASTFM_USER}"
    else
      printf "\nLast.fm User:\t[Not Set]"
    fi
    if [ "${LASTFM_APIKEY}" ]; then
      printf "\nLast.fm API Key:\t[Set]"
    else
      printf "\nLast.fm API Key:\t[Not Set]"
    fi
    if [ "${LASTFM_SECRET}" ]; then
      printf "\nLast.fm API Secret:\t[Set]"
    else
      printf "\nLast.fm API Secret:\t[Not Set]"
    fi
    if [ "${SOUNDCLOUD_SLUG}" ]; then
      printf "\nSoundcloud Slug:\t${SOUNDCLOUD_SLUG}"
    else
      printf "\nSoundcloud Slug:\t[Not Set]"
    fi
    if [ "${SPOTIFY_CLIENT}" ]; then
      printf "\nSpotify Client:\t[Set]"
    else
      printf "\nSpotify Client:\t[Not Set]"
    fi
    if [ "${SPOTIFY_SECRET}" ]; then
      printf "\nSpotify Secret:\t[Set]"
    else
      printf "\nSpotify Secret:\t[Not Set]"
    fi
    if [ "${YOUTUBE_APIKEY}" ]; then
      printf "\nYouTube API Key:\t[Set]\n"
    else
      printf "\nYouTube API Key:\t[Not Set]\n"
    fi
  fi
  printf "\n"
  show_system_status
}

show_logs_menu() {
  have_alsa=$(type -p alsa-info)
  while true
  do
    clear_screen
    show_system_status
    heading "MusicPlayerPlus Service Logs Menu" "Service Logs Menu"
    PS3="${BOLD}${PLEASE} command choice (numeric or text, 'h' for help): ${NORM}"
    options=()
    [ "${have_alsa}" ] && options+=("ALSA Sound System Info       [a]")
    [ "${s_active}" == "active" ] || [ "${s_enabled}" == "enabled" ] && {
      options+=("View Beets MPD Stats Log     [b]")
    }
    [ "${w_active}" == "active" ] || [ "${w_enabled}" == "enabled" ] && {
      options+=("View Beets Web Service Log   [w]")
    }
    [ "${m_active}" == "active" ] || [ "${m_enabled}" == "enabled" ] && {
      options+=("View Music Player Daemon Log [d]")
    }
    [ "${z_active}" == "active" ] || [ "${z_enabled}" == "enabled" ] && {
      options+=("View Mopidy Server Log       [M]")
    }
    [ "${n_active}" == "active" ] || [ "${n_enabled}" == "enabled" ] && {
      options+=("View Navidrome Server Log    [n]")
    }
    [ "${i_active}" == "active" ] || [ "${i_enabled}" == "enabled" ] && {
      options+=("View PipeWire Server Log     [p]")
    }
    [ "${p_active}" == "active" ] || [ "${p_enabled}" == "enabled" ] && {
      options+=("View PulseAudio Server Log   [P]")
    }
    [ "${y_active}" == "active" ] || [ "${y_enabled}" == "enabled" ] && {
      options+=("View Last.fm Scrobbler Log   [l]")
    }
    options+=("Manage Services              [s]")
    options+=("Main menu                    [m]")
    options+=("Quit                         [q]")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear_screen
              printf "\n"
              show_help_menu
              break
              ;;
          "Main menu"*,*|*,"Main menu"*|"Back",*|*,"Back"|"back",*|*,"back"|"m",*|*,"m")
              clear_screen
              printf "\n"
              init_vars
              show_main_menu
              break 2
              ;;
          "ALSA Sound System Info"*,*|*,"ALSA Sound System Info"*|"a",*|*,"a")
              alsa-info --stdout | less
              break
              ;;
          "View Beets MPD Stats Log"*,*|*,"View Beets MPD Stats Log"*|"b",*|*,"b")
              journalctl --user-unit=mpdstats.service --since yesterday
              break
              ;;
          "View Beets Web Service Log"*,*|*,"View Beets Web Service Log"*|"w",*|*,"w")
              journalctl --user-unit=webplugin.service --since yesterday
              break
              ;;
          "View Music Player Daemon Log"*,*|*,"View Music Player Daemon Log"*|"d",*|*,"d")
              journalctl --user-unit=mpd.service --since yesterday
              break
              ;;
          "View Mopidy Server Log"*,*|*,"View Mopidy Server Log"*|"M",*|*,"M")
              journalctl --user-unit=mopidy.service --since yesterday
              break
              ;;
          "View Navidrome Server Log"*,*|*,"View Navidrome Server Log"*|"n",*|*,"n")
              journalctl --user-unit=navidrome.service --since yesterday
              break
              ;;
          "View PipeWire Server Log"*,*|*,"View PipeWire Server Log"*|"p",*|*,"p")
              journalctl --user-unit=pipewire.service --since yesterday
              break
              ;;
          "View PulseAudio Server Log"*,*|*,"View PulseAudio Server Log"*|"P",*|*,"P")
              journalctl --user-unit=pulseaudio.service --since yesterday
              break
              ;;
          "View Last.fm Scrobbler Log"*,*|*,"View Last.fm Scrobbler Log"*|"l",*|*,"l")
              journalctl --user-unit=yams.service --since yesterday
              break
              ;;
          "Manage Services"*,*|*,"Manage Services"*|"s",*|*,"s")
              clear_screen
              printf "\n"
              show_services_menu
              break
              ;;
          "Quit"*,*|*,"Quit"*|"quit",*|*,"quit"|"q",*|*,"q")
              farewell_exit "Exiting MusicPlayerPlus"
              ;;
          *,*|*,*)
              break
              ;;
      esac
      REPLY=
    done
  done
  init_vars
}

show_services_menu() {
  while true
  do
    clear_screen
    show_system_status
    heading "MusicPlayerPlus Services Menu" "Services Menu"
    PS3="${BOLD}${PLEASE} command choice (numeric or text, 'h' for help): ${NORM}"
    options=("Configure ALSA Sound      [a]")
    [ "${have_mopidy}" ] || options+=("Install Mopidy Server     [im]")
    if [ "${have_navi}" ]; then
      if systemctl --user is-active navidrome.service >/dev/null 2>&1
      then
        options+=("Open Navidrome in Browser [on]")
      fi
    else
      options+=("Install Navidrome Server  [in]")
    fi
    if [ "${w_enabled}" == "enabled" ]
    then
      options+=("Disable Beets Web Service [dw]")
    else
      options+=("Enable Beets Web Service  [ew]")
    fi
    if [ "${s_enabled}" == "enabled" ]
    then
      options+=("Disable Beets MPD Stats   [ds]")
    else
      options+=("Enable Beets MPD Stats    [es]")
    fi
    if [ "${m_enabled}" == "enabled" ]
    then
      options+=("Disable MPD               [d]")
    else
      options+=("Enable MPD                [e]")
    fi
    [ "${have_mopidy}" ] && {
      if [ "${z_enabled}" == "enabled" ]
      then
        options+=("Disable Mopidy Server     [dm]")
      else
        options+=("Enable Mopidy Server      [em]")
      fi
    }
    [ "${have_navi}" ] && {
      if [ "${n_enabled}" == "enabled" ]
      then
        options+=("Disable Navidrome Server  [dn]")
      else
        options+=("Enable Navidrome Server   [en]")
      fi
    }
    if [ "${i_enabled}" == "enabled" ]
    then
      options+=("Disable PipeWire          [dp]")
    else
      options+=("Enable PipeWire           [ep]")
    fi
    if [ "${p_enabled}" == "enabled" ]
    then
      options+=("Disable PulseAudio        [dP]")
    else
      options+=("Enable PulseAudio         [eP]")
    fi
    if [ "${y_enabled}" == "enabled" ]
    then
      options+=("Disable Last.fm Scrobbler [df]")
    else
      options+=("Enable Last.fm Scrobbler  [ef]")
    fi
    if [ "${s_active}" == "active" ]
    then
      options+=("Stop Beets MPD Stats      [Ss]")
      options+=("Restart Beets MPD Stats   [rs]")
    else
      options+=("Start Beets MPD Stats     [SS]")
    fi
    if [ "${w_active}" == "active" ]
    then
      options+=("Stop Beets Web Service    [W]")
      options+=("Restart Beets Web Service [rw]")
    else
      options+=("Start Beets Web Service   [w]")
    fi
    if [ "${m_active}" == "active" ]
    then
      options+=("Stop MPD                  [S]")
      options+=("Restart MPD               [r]")
    else
      options+=("Start MPD                 [s]")
    fi
    [ "${have_mopidy}" ] && {
      if [ "${z_active}" == "active" ]
      then
        options+=("Stop Mopidy Server        [Sm]")
        options+=("Restart Mopidy Server     [rm]")
      else
        options+=("Start Mopidy Server       [SM]")
      fi
    }
    [ "${have_navi}" ] && {
      if [ "${n_active}" == "active" ]
      then
        options+=("Stop Navidrome Server     [N]")
        options+=("Restart Navidrome Server  [rn]")
      else
        options+=("Start Navidrome Server    [n]")
      fi
    }
    if [ "${i_active}" == "active" ]
    then
      options+=("Stop PipeWire             [Sp]")
      options+=("Restart PipeWire          [rp]")
    else
      options+=("Start PipeWire            [p]")
    fi
    if [ "${p_active}" == "active" ]
    then
      options+=("Stop PulseAudio           [SP]")
      options+=("Restart PulseAudio        [rP]")
    else
      options+=("Start PulseAudio          [P]")
    fi
    if [ "${y_active}" == "active" ]
    then
      options+=("Stop Last.fm Scrobbler    [Sf]")
      options+=("Restart Last.fm Scrobbler [rf]")
    else
      if [ -f ${HOME}/.config/yams/.lastfm_session ]; then
        options+=("Start Last.fm Scrobbler   [SF]")
      else
        options+=("Activate Last.fm Scrobble [af]")
      fi
    fi
    [ "${m_enabled}" == "enabled" ] || [ "${m_active}" == "active" ] && {
      options+=("MPD Status                [sd]")
    }
    [ "${s_enabled}" == "enabled" ] || [ "${s_active}" == "active" ] && {
      options+=("Beets MPD Stats Status    [ss]")
    }
    [ "${w_enabled}" == "enabled" ] || [ "${w_active}" == "active" ] && {
      options+=("Beets Web Service Status  [sw]")
    }
    [ "${z_enabled}" == "enabled" ] || [ "${z_active}" == "active" ] && {
      [ "${have_mopidy}" ] && options+=("Mopidy Server Status      [sm]")
    }
    [ "${n_enabled}" == "enabled" ] || [ "${n_active}" == "active" ] && {
      [ "${have_navi}" ] && options+=("Navidrome Server Status   [sn]")
    }
    [ "${i_enabled}" == "enabled" ] || [ "${i_active}" == "active" ] && {
      options+=("PipeWire Status           [sp]")
    }
    [ "${p_enabled}" == "enabled" ] || [ "${p_active}" == "active" ] && {
      options+=("PulseAudio Status         [sP]")
    }
    [ "${y_enabled}" == "enabled" ] || [ "${y_active}" == "active" ] && {
      options+=("Last.fm Scrobbler Status  [sf]")
    }
    options+=("Stop All Active Services  [X]")
    [ "${z_active}" == "active" ] && [ "${have_mopidy}" ] && {
      options+=("Scan Mopidy library       [um]")
    }
    [ "${m_active}" == "active" ] && [ "${have_mpc}" ] && {
      options+=("Scan MPD music library    [u]")
    }
    options+=("View Music Service Logs   [l]")
    options+=("Main menu                 [m]")
    options+=("Quit                      [q]")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear_screen
              printf "\n"
              show_help_menu
              break
              ;;
          "Main menu"*,*|*,"Main menu"*|"Back",*|*,"Back"|"back",*|*,"back"|"m",*|*,"m")
              clear_screen
              printf "\n"
              init_vars
              show_main_menu
              break 2
              ;;
          "Configure ALSA Sound"*,*|*,"Configure ALSA Sound"*|"a",*|*,"a")
              mpp_service alsaconf
              break
              ;;
          "Install Mopidy Server"*,*|*,"Install Mopidy Server"*|"im",*|*,"im")
              mppinit mopidy
              have_mopidy=$(type -p mopidy)
              break
              ;;
          "Enable Mopidy Server"*,*|*,"Enable Mopidy Server"*|"em",*|*,"em")
              mpp_service disable mpdstats
              mpp_service stop mpdstats
              mpp_service disable yams
              mpp_service stop yams
              mpp_service disable mpd
              mpp_service stop mpd
              mpp_service enable mopidy
              break
              ;;
          "Disable Mopidy Server"*,*|*,"Disable Mopidy Server"*|"dm",*|*,"dm")
              mpp_service disable mopidy
              break
              ;;
          "Start Mopidy Server"*,*|*,"Start Mopidy Server"*|"SM",*|*,"SM")
              mpp_service disable mpdstats
              mpp_service stop mpdstats
              mpp_service disable yams
              mpp_service stop yams
              mpp_service disable mpd
              mpp_service stop mpd
              mpp_service start mopidy
              break
              ;;
          "Stop Mopidy Server"*,*|*,"Stop Mopidy Server"*|"Sm",*|*,"Sm")
              mpp_service stop mopidy
              break
              ;;
          "Restart Mopidy Server"*,*|*,"Restart Mopidy Server"*|"rm",*|*,"rm")
              mpp_service disable mpdstats
              mpp_service stop mpdstats
              mpp_service disable yams
              mpp_service stop yams
              mpp_service disable mpd
              mpp_service stop mpd
              mpp_service restart mopidy
              break
              ;;
          "Mopidy Server Status"*,*|*,"Mopidy Server Status"*|"sm",*|*,"sm")
              mpp_service status mopidy
              break
              ;;
          "Open Navidrome"*,*|*,"Open Navidrome"*|"on",*|*,"on")
              if [ "${have_gio}" ]; then
                gio open 'http://localhost:4533' >/dev/null 2>&1
              else
                xdg-open 'http://localhost:4533' >/dev/null 2>&1
              fi
              break
              ;;
          "Install Navidrome Server"*,*|*,"Install Navidrome Server"*|"in",*|*,"in")
              mppinit navidrome
              if [ -x /opt/navidrome/navidrome ]
              then
                have_navi=1
              else
                have_navi=
              fi
              break
              ;;
          "Enable Navidrome Server"*,*|*,"Enable Navidrome Server"*|"en",*|*,"en")
              mpp_service enable navidrome
              break
              ;;
          "Disable Navidrome Server"*,*|*,"Disable Navidrome Server"*|"dn",*|*,"dn")
              mpp_service disable navidrome
              break
              ;;
          "Start Navidrome Server"*,*|*,"Start Navidrome Server"*|"n",*|*,"n")
              mpp_service start navidrome
              break
              ;;
          "Stop Navidrome Server"*,*|*,"Stop Navidrome Server"*|"N",*|*,"N")
              mpp_service stop navidrome
              break
              ;;
          "Restart Navidrome Server"*,*|*,"Restart Navidrome Server"*|"rn",*|*,"rn")
              mpp_service restart navidrome
              break
              ;;
          "Navidrome Server Status"*,*|*,"Navidrome Server Status"*|"sn",*|*,"sn")
              mpp_service status navidrome
              break
              ;;
          "Enable MPD"*,*|*,"Enable MPD"*|"e",*|*,"e")
              [ "${have_mopidy}" ] && {
                mpp_service disable mopidy
                mpp_service stop mopidy
              }
              mpp_service enable mpd
              break
              ;;
          "Disable MPD"*,*|*,"Disable MPD"*|"d",*|*,"d")
              mpp_service disable mpd
              break
              ;;
          "Start MPD"*,*|*,"Start MPD"*|"s",*|*,"s")
              [ "${have_mopidy}" ] && {
                mpp_service disable mopidy
                mpp_service stop mopidy
              }
              mpp_service start mpd
              break
              ;;
          "Stop MPD"*,*|*,"Stop MPD"*|"S",*|*,"S")
              mpp_service stop mpd
              break
              ;;
          "Restart MPD"*,*|*,"Restart MPD"*|"r",*|*,"r")
              [ "${have_mopidy}" ] && {
                mpp_service disable mopidy
                mpp_service stop mopidy
              }
              mpp_service restart mpd
              break
              ;;
          "MPD Status"*,*|*,"MPD Status"*|"sd",*|*,"sd")
              if [ "${have_mpc}" ]
              then
                { mpc stats && \
                  mpp_service status mpd; } | less
              else
                mpp_service status mpd
              fi
              break
              ;;
          "Enable PipeWire"*,*|*,"Enable PipeWire"*|"ep",*|*,"ep")
              mpp_service disable pulseaudio
              mpp_service enable pipewire
              break
              ;;
          "Disable PipeWire"*,*|*,"Disable PipeWire"*|"dp",*|*,"dp")
              mpp_service disable pipewire
              break
              ;;
          "Start PipeWire"*,*|*,"Start PipeWire"*|"p",*|*,"p")
              mpp_service stop pulseaudio
              mpp_service start pipewire
              break
              ;;
          "Stop PipeWire"*,*|*,"Stop PipeWire"*|"Sp",*|*,"Sp")
              mpp_service stop pipewire
              break
              ;;
          "Restart PipeWire"*,*|*,"Restart PipeWire"*|"rp",*|*,"rp")
              mpp_service restart pipewire
              break
              ;;
          "PipeWire Status"*,*|*,"PipeWire Status"*|"sp",*|*,"sp")
              mpp_service status pipewire
              break
              ;;
          "Enable PulseAudio"*,*|*,"Enable PulseAudio"*|"eP",*|*,"eP")
              mpp_service disable pipewire
              mpp_service enable pulseaudio
              break
              ;;
          "Disable PulseAudio"*,*|*,"Disable PulseAudio"*|"dP",*|*,"dP")
              mpp_service disable pulseaudio
              break
              ;;
          "Start PulseAudio"*,*|*,"Start PulseAudio"*|"P",*|*,"P")
              mpp_service stop pipewire
              mpp_service start pulseaudio
              break
              ;;
          "Stop PulseAudio"*,*|*,"Stop PulseAudio"*|"SP",*|*,"SP")
              mpp_service stop pulseaudio
              break
              ;;
          "Restart PulseAudio"*,*|*,"Restart PulseAudio"*|"rP",*|*,"rP")
              mpp_service restart pulseaudio
              break
              ;;
          "PulseAudio Status"*,*|*,"PulseAudio Status"*|"sP",*|*,"sP")
              mpp_service status pulseaudio
              break
              ;;
          "Enable Beets MPD Stats"*,*|*,"Enable Beets MPD Stats"*|"es",*|*,"es")
              [ "${have_mopidy}" ] && {
                [ "${z_active}" == "active" ] || \
                [ "${z_enabled}" == "enabled" ] && {
                  echo "MPD Stats not compatible with Mopidy"
                  echo "Enable MPD to use MPD Stats"
                  break
                }
              }
              mpp_service enable mpdstats
              break
              ;;
          "Disable Beets MPD Stats"*,*|*,"Disable Beets MPD Stats"*|"ds",*|*,"ds")
              mpp_service disable mpdstats
              break
              ;;
          "Start Beets MPD Stats"*,*|*,"Start Beets MPD Stats"*|"SS",*|*,"SS")
              [ "${have_mopidy}" ] && {
                [ "${z_active}" == "active" ] || \
                [ "${z_enabled}" == "enabled" ] && {
                  echo "MPD Stats not compatible with Mopidy"
                  echo "Enable MPD to use MPD Stats"
                  break
                }
              }
              mpp_service start mpdstats
              break
              ;;
          "Stop Beets MPD Stats"*,*|*,"Stop Beets MPD Stats"*|"Ss",*|*,"Ss")
              mpp_service stop mpdstats
              break
              ;;
          "Restart Beets MPD Stats"*,*|*,"Restart Beets MPD Stats"*|"rs",*|*,"rs")
              [ "${have_mopidy}" ] && {
                [ "${z_active}" == "active" ] || \
                [ "${z_enabled}" == "enabled" ] && {
                  echo "MPD Stats not compatible with Mopidy"
                  echo "Enable MPD to use MPD Stats"
                  break
                }
              }
              mpp_service restart mpdstats
              break
              ;;
          "Beets MPD Stats Status"*,*|*,"Beets MPD Stats Status"*|"ss",*|*,"ss")
              mpp_service status mpdstats
              break
              ;;
          "Enable Beets Web Service"*,*|*,"Enable Beets Web Service"*|"ew",*|*,"ew")
              mpp_service enable webplugin
              break
              ;;
          "Disable Beets Web Service"*,*|*,"Disable Beets Web Service"*|"dw",*|*,"dw")
              [ "${have_mopidy}" ] && {
                [ "${z_active}" == "active" ] || \
                [ "${z_enabled}" == "enabled" ] && {
                  echo "Mopidy Beets extension requires the Beets Web Service."
                  echo "Disable the Mopidy Beets extension before disabling"
                  echo "the Beets Web Service."
                  break
                }
              }
              mpp_service disable webplugin
              break
              ;;
          "Start Beets Web Service"*,*|*,"Start Beets Web Service"*|"w",*|*,"w")
              mpp_service start webplugin
              break
              ;;
          "Stop Beets Web Service"*,*|*,"Stop Beets Web Service"*|"W",*|*,"W")
              [ "${have_mopidy}" ] && {
                [ "${z_active}" == "active" ] || \
                [ "${z_enabled}" == "enabled" ] && {
                  echo "Mopidy Beets extension requires the Beets Web Service."
                  echo "Disable the Mopidy Beets extension before stopping"
                  echo "the Beets Web Service."
                  break
                }
              }
              mpp_service stop webplugin
              break
              ;;
          "Restart Beets Web Service"*,*|*,"Restart Beets Web Service"*|"rw",*|*,"rw")
              mpp_service restart webplugin
              break
              ;;
          "Beets Web Service Status"*,*|*,"Beets Web Service Status"*|"sw",*|*,"sw")
              mpp_service status webplugin
              break
              ;;
          "Enable Last.fm Scrobbler"*,*|*,"Enable Last.fm Scrobbler"*|"ef",*|*,"ef")
              [ "${have_mopidy}" ] && {
                [ "${z_active}" == "active" ] || \
                [ "${z_enabled}" == "enabled" ] && {
                  echo "MPD Scrobbler not compatible with Mopidy"
                  echo "Enable MPD to use MPD Scrobbler"
                  break
                }
              }
              mpp_service enable yams
              break
              ;;
          "Disable Last.fm Scrobbler"*,*|*,"Disable Last.fm Scrobbler"*|"df",*|*,"df")
              mpp_service disable yams
              break
              ;;
          "Activate Last.fm Scrobble"*,*|*,"Activate Last.fm Scrobble"*|"af",*|*,"af")
              [ "${have_mopidy}" ] && {
                [ "${z_active}" == "active" ] || \
                [ "${z_enabled}" == "enabled" ] && {
                  echo "MPD Scrobbler not compatible with Mopidy"
                  echo "Enable MPD to use MPD Scrobbler"
                  break
                }
              }
              mpplus -Y
              set_need_yams
              break
              ;;
          "Start Last.fm Scrobbler"*,*|*,"Start Last.fm Scrobbler"*|"SF",*|*,"SF")
              [ "${have_mopidy}" ] && {
                [ "${z_active}" == "active" ] || \
                [ "${z_enabled}" == "enabled" ] && {
                  echo "MPD Scrobbler not compatible with Mopidy"
                  echo "Enable MPD to use MPD Scrobbler"
                  break
                }
              }
              mpp_service start yams
              break
              ;;
          "Stop Last.fm Scrobbler"*,*|*,"Stop Last.fm Scrobbler"*|"Sf",*|*,"Sf")
              mpp_service stop yams
              break
              ;;
          "Restart Last.fm Scrobbler"*,*|*,"Restart Last.fm Scrobbler"*|"rf",*|*,"rf")
              [ "${have_mopidy}" ] && {
                [ "${z_active}" == "active" ] || \
                [ "${z_enabled}" == "enabled" ] && {
                  echo "MPD Scrobbler not compatible with Mopidy"
                  echo "Enable MPD to use MPD Scrobbler"
                  break
                }
              }
              mpp_service restart yams
              break
              ;;
          "Last.fm Scrobbler Status"*,*|*,"Last.fm Scrobbler Status"*|"sf",*|*,"sf")
              mpp_service status yams
              break
              ;;
          "Stop All"*,*|*,"Stop All"*|"X",*|*,"X")
              mpp_service stop ALL
              break
              ;;
          "Scan Mopidy"*,*|*,"Scan Mopidy"*|"um",*|*,"um")
              mopidy local scan > /dev/null 2>&1 &
              break
              ;;
          "Scan MPD"*,*|*,"Scan MPD"*|"u",*|*,"u")
              mpc update --quiet &
              break
              ;;
          "View Music Service Log"*,*|*,"View Music Service Log"*|"l",*|*,"l")
              clear_screen
              printf "\n"
              show_logs_menu
              break
              ;;
          "Quit"*,*|*,"Quit"*|"quit",*|*,"quit"|"q",*|*,"q")
              farewell_exit "Exiting MusicPlayerPlus"
              ;;
          *,*|*,*)
              break
              ;;
      esac
      REPLY=
    done
  done
  init_vars
}

show_fzmp_menu() {
  while true
  do
    clear_screen
    heading "MusicPlayerPlus Fuzzy Search Menu" "Fuzzy Search"
    PS3="${BOLD}${PLEASE} command choice (numeric or text, 'h' for help): ${NORM}"
    options=()
    [ "${have_fzf}" ] && options+=("Search all songs in library    [s]")
    [ "${have_fzf}" ] && options+=("Search artist/album with fzf   [a]")
    [ "${have_dmenu}" ] && options+=("Search artist/album with dmenu [d]")
    [ "${have_fzf}" ] && options+=("List genres in library         [g]")
    [ "${have_fzf}" ] && options+=("Search current playlist        [p]")
    [ "${have_fzf}" ] && options+=("List saved playlists           [P]")
    options+=("Main menu                      [m]")
    options+=("Quit                           [q]")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear_screen
              printf "\n"
              show_help_menu
              break
              ;;
          "Main menu"*,*|*,"Main menu"*|"Back",*|*,"Back"|"back",*|*,"back"|"m",*|*,"m")
              clear_screen
              printf "\n"
              init_vars
              show_main_menu
              break 2
              ;;
          "Search artist/album with fzf"*,*|*,"Search artist/album with fzf"*|"a",*|*,"a")
              fzmp -a
              break
              ;;
          "Search artist/album with dmenu"*,*|*,"Search artist/album with dmenu"*|"d",*|*,"d")
              [ -x ${SCRIPTS}/mpdmenu.sh ] && ${SCRIPTS}/mpdmenu.sh
              break
              ;;
          "Search all songs"*,*|*,"Search all songs"*|"s",*|*,"s")
              fzmp -A
              break
              ;;
          "List genre"*,*|*,"List genre"*|"g",*|*,"g")
              fzmp -g
              break
              ;;
          "Search current"*,*|*,"Search current"*|"p",*|*,"p")
              fzmp -p
              break
              ;;
          "List saved"*,*|*,"List saved"*|"P",*|*,"P")
              fzmp -P
              break
              ;;
          "Quit"*,*|*,"Quit"*|"quit",*|*,"quit"|"q",*|*,"q")
              farewell_exit "Exiting MusicPlayerPlus"
              ;;
          *,*|*,*)
              break
              ;;
      esac
    done
  done
}

show_ascii_menu() {
  while true
  do
    clear_screen
    heading "MusicPlayerPlus Asciimatics Animations Menu" "Asciimatics"
    SPLASH=1
    if [ "${AUDIO}" ]
    then
      audiostat="[ON] "
    else
      audiostat="[OFF]"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="[ON] "
    else
      recordstat="[OFF]"
    fi
    if [ "${USE_TMUX}" ]
    then
      usetmux="[ON] "
    else
      usetmux="[OFF]"
    fi
    skip_it_so=
    save_it_so=
    PS3="${BOLD}${PLEASE} command choice (numeric or text, 'h' for help): ${NORM}"
    options=("Julia Set ASCIImatics Animation [J]")
    options+=("MPPlus ASCIImatics Animation    [M]")
    options+=("Plasma ASCIImatics Animation    [P]")
    [ "${have_asciiart}" ] && options+=("Asciiville Animation            [A]")
    [ "${have_gum}" ] && [ "${have_figlet}" ] && [ "${have_mppanim}" ] && {
      options+=("MusicPlayerPlus Splashscreen    [S]")
    }
    options+=("Toggle Audio              ${audiostat} [a]")
    [ "${have_nema}" ] && options+=("Toggle Record Tmux        ${recordstat} [r]")
    options+=("Toggle Use Tmux           ${usetmux} [t]")
    options+=("Main menu                       [m]")
    options+=("Quit                            [q]")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear_screen
              printf "\n"
              show_help_menu
              skip_it_so=1
              break
              ;;
          "Main menu"*,*|*,"Main menu"*|"Back",*|*,"Back"|"back",*|*,"back"|"m",*|*,"m")
              clear_screen
              printf "\n"
              init_vars
              show_main_menu
              break 2
              ;;
          "MusicPlayerPlus Splash"*,* | *,"MusicPlayerPlus Splash"* | "S",* | *,"S")
              tput clear
              mppanim -a
              [ $? -eq 0 ] || tput cup 0 0 2>/dev/null
              mppanim -a -z
              [ $? -eq 0 ] || tput cup 0 0 2>/dev/null
              mppanim -a
              [ $? -eq 0 ] || tput cup 0 0 2>/dev/null
              skip_it_so=1
              break
              ;;
          "Asciiville Anim"*,* | *,"Asciiville Anim"* | "A",* | *,"A")
              MPPSPLASH="${MPPSPLASH} -i"
              MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l art"
              break
              ;;
          "Julia Set ASCIImatics Animation"*,*|*,"Julia Set ASCIImatics Animation"*|"J",*|*,"J")
              MPPSPLASH="${MPPSPLASH} -j"
              MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l julia"
              break
              ;;
          "MPPlus ASCIImatics Animation"*,*|*,"MPPlus ASCIImatics Animation"*|"M",*|*,"M")
              MPPSPLASH="${MPPSPLASH} -m"
              MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l rocks"
              break
              ;;
          "Plasma ASCIImatics Animation"*,*|*,"Plasma ASCIImatics Animation"*|"P",*|*,"P")
              MPPSPLASH="${MPPSPLASH} -p"
              MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l plasma"
              break
              ;;
          "Toggle Audio"*,*|*,"Toggle Audio"*|"a",*|*,"a")
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                MPPSPLASH="${MPPSPLASH} -a"
                MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -a"
              else
                MPPSPLASH=$(echo ${MPPSPLASH} | sed -e "s/ -a//")
                MPPSPLASH_TMUX=$(echo ${MPPSPLASH_TMUX} | sed -e "s/ -a//")
              fi
              save_it_so=1
              skip_it_so=1
              break
              ;;
          "Toggle Record Tmux"*,*|*,"Toggle Record Tmux"*|"r",*|*,"r")
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                USE_TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -R"
              else
                MPPSPLASH_TMUX=$(echo ${MPPSPLASH_TMUX} | sed -e "s/ -R//")
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Use Tmux"*,*|*,"Toggle Use Tmux"*|"t",*|*,"t")
              if [ "${USE_TMUX}" ]
              then
                USE_TMUX=
                RECORD=
              else
                USE_TMUX=1
              fi
              save_it_so=1
              skip_it_so=1
              break
              ;;
          "Quit"*,*|*,"Quit"*|"quit",*|*,"quit"|"q",*|*,"q")
              farewell_exit "Exiting MusicPlayerPlus"
              ;;
          *,*|*,*)
              skip_it_so=1
              break
              ;;
      esac
      REPLY=
    done
    [ "${save_it_so}" ] && {
      save_config
    }
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
  init_vars
}

choose_folder() {
  TMP="$(mktemp)"
  ranger --choosedir="${TMP}" "${HOME}" 1>&2
  cat ${TMP}
  rm  -f ${TMP}
}

choose_vault_folder() {
  TMP="$(mktemp)"
  ranger --choosedir="${TMP}" "${DISCOGS_DIR}" 1>&2
  cat ${TMP}
  rm  -f ${TMP}
}

select_vault_dir() {
  if [ "${have_ranger}" ]
  then
    echo ""
    echo "Choosing the vault folder in Ranger is done by visiting a directory"
    echo ""
    echo "Use the arrow keys to browse folders"
    echo "Press 'Enter' to enter a directory"
    echo ""
    echo "While in the directory you wish to select, quit Ranger with 'q'"
    echo ""
    while true
    do
      read -p "Select vault folder now? (y/n) " answer
      case ${answer} in
        [Yy]* )
          vault="$(choose_vault_folder)"
          echo ""
          echo "Selected vault folder = ${vault}"
          echo ""
          break
          ;;
        [Nn]* )
          printf "\nSkipping vault folder selection.\n"
          break
          ;;
        * ) echo "Please answer 'y' to select directory, or 'n' to skip."
          ;;
      esac
    done
  else
    vault=$(dialog --stdout \
                   --title "Please select a vault folder" \
                   --fselect ${DISCOGS_DIR} 14 48)
  fi
}

select_music_dir() {
  if [ "${have_ranger}" ]
  then
    echo ""
    echo "Choosing the music directory in Ranger is done by visiting a directory"
    echo ""
    echo "Use the arrow keys to browse folders"
    echo "Press 'Enter' to enter a directory"
    echo "Create a new directory with ':mkdir <dirname>'"
    echo ""
    echo "While in the directory you wish to select, quit Ranger with 'q'"
    echo ""
    while true
    do
      read -p "Select music directory now? (y/n) " answer
      case ${answer} in
        [Yy]* )
          MUSIC_DIR="$(choose_folder)"
          echo ""
          echo "Selected music directory = ${MUSIC_DIR}"
          echo ""
          break
          ;;
        [Nn]* )
          printf "\nSkipping music directory selection.\n"
          break
          ;;
        * ) echo "Please answer 'y' to select directory, or 'n' to skip."
          ;;
      esac
    done
  else
    MUSIC_DIR=$(dialog --stdout \
                          --title "Please select a music folder" \
                          --fselect ${HOME} 14 48)
  fi
}

show_main_menu() {
  while true
  do
    clear_screen
    printf "\n"
    if [ "${FULLSCREEN}" ]
    then
      fullstat="(ON) "
    else
      fullstat="(OFF)"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="(ON) "
    else
      recordstat="(OFF)"
    fi
    if [ "${COVER_ART}" ]
    then
      coverstat="(ON) "
    else
      coverstat="(OFF)"
    fi
    if [ "${USE_TMUX}" ]
    then
      usetmux="(ON) "
    else
      usetmux="(OFF)"
    fi
    skip_it_so=
    save_it_so=
    heading "MusicPlayerPlus Main Menu" "Main Menu"
    PS3="${BOLD}${PLEASE} command choice (numeric or text, 'h' for help): ${NORM}"
                            options=("Launch ${MPD_CLIENT} in Current  [lc]")
    [ "${have_kitty}" ] && options+=("Launch ${MPD_CLIENT} with Kitty  [lk]")
    [ "${have_gnome}" ] && options+=("Launch ${MPD_CLIENT} with Gnome  [lg]")
    [ "${have_retro}" ] && options+=("Launch ${MPD_CLIENT} with Retro  [lr]")
    [ "${have_simple}" ] && options+=("Launch ${MPD_CLIENT} with Simple [ls]")
    [ "${have_tilix}" ] && options+=("Launch ${MPD_CLIENT} with Tilix  [lt]")
    [ "${have_cantata}" ] && options+=("Cantata Music Player Plus   [C]")
    if systemctl --user is-active navidrome.service >/dev/null 2>&1
    then
      options+=("Open Navidrome in Browser  [on]")
    fi
    [ "${have_spot}" ] && options+=("Spotify Music Player Plus  [sp]")
    [ "${have_ytm}" ] && options+=("YouTube Music Player Plus   [y]")
    [ "${need_yams}" ] && options+=("Activate Last.fm Scrobbler  [S]")
    options+=("ASCIImatics Animations      [a]")
    options+=("Convert M4A files to MP3    [c]")
    options+=("Convert WAV files to MP3    [w]")
    options+=("Import Music to Beets       [I]")
    options+=("Fetch Lyrics                [f]")
    options+=("Blissify Audio Extraction   [b]")
    options+=("Essentia Audio Extraction   [e]")
    options+=("Manage Downloads            [d]")
    options+=("Manage Services             [s]")
    options+=("View Services Status        [v]")
    options+=("View Music Service Logs     [l]")
    [ "${have_fzf}" ] && is_running mpd && {
      options+=("List/Search/Select Media    [m]")
    }
      options+=("Select Music Directory      [M]")
    [ "${have_uebz}" ] && options+=("Toggle Show Cover Art ${coverstat} [S]")
    options+=("Toggle Use Tmux       ${usetmux} [t]")
    [ "${have_nema}" ] && options+=("Toggle Record Tmux    ${recordstat} [R]")
    options+=("Toggle Fullscreen     ${fullstat} [F]")
    [ "${have_cantata}" ] || options+=("Install Cantata MPD client  [ic]")
    [ "${have_spot}" ] || options+=("Install Spotify Player      [is]")
    [ "${have_ytm}" ] || options+=("Install YouTubeMusic Player [iy]")
    [ "${have_ascii}" ] && options+=("Asciiville Menu             [am]")
    [ "${have_kc}" ] && options+=("Kitty Control Menu          [km]")
    [ "${have_mirror}" ] && options+=("MagicMirror Command Menu    [mm]")
    [ "${have_roon}" ] && options+=("RoonCommandLine Menu        [rm]")
    options+=("Configure MusicPlayerPlus   [E]")
    options+=("About                       [A]")
    options+=("Info                        [i]")
    options+=("Quit                        [q]")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear_screen
              printf "\n"
              show_help_menu
              skip_it_so=1
              break
              ;;
          "Launch ${MPD_CLIENT} in Current"*,*|*,"Launch ${MPD_CLIENT} in Current"*|"lc",*|*,"lc")
              MPCPLUS="${MPD_CLIENT}"
              USE_TMUX=1
              CURRENT=1
              MPP_MODE=current
              GNOME=
              KITTY=
              RETRO=
              SIMPLE=
              TILIX=
              break
              ;;
          "Launch ${MPD_CLIENT} with Kitty"*,*|*,"Launch ${MPD_CLIENT} with Kitty"*|"lk",*|*,"lk")
              MPCPLUS="${MPD_CLIENT}"
              KITTY=1
              MPP_MODE=kitty
              CURRENT=
              GNOME=
              RETRO=
              SIMPLE=
              TILIX=
              break
              ;;
          "Launch ${MPD_CLIENT} with Gnome"*,*|*,"Launch ${MPD_CLIENT} with Gnome"*|"lg",*|*,"lg")
              MPCPLUS="${MPD_CLIENT}"
              MPP_MODE=gnome
              GNOME=1
              CURRENT=
              KITTY=
              RETRO=
              SIMPLE=
              TILIX=
              break
              ;;
          "Launch ${MPD_CLIENT} with Retro"*,*|*,"Launch ${MPD_CLIENT} with Retro"*|"lr",*|*,"lr")
              MPCPLUS="${MPD_CLIENT}"
              RETRO=1
              MPP_MODE=retro
              CURRENT=
              GNOME=
              KITTY=
              SIMPLE=
              TILIX=
              break
              ;;
          "Launch ${MPD_CLIENT} with Simple"*,*|*,"Launch ${MPD_CLIENT} with Simple"*|"ls",*|*,"ls")
              MPCPLUS="${MPD_CLIENT}"
              SIMPLE=1
              MPP_MODE=simple
              CURRENT=
              GNOME=
              KITTY=
              RETRO=
              TILIX=
              break
              ;;
          "Launch ${MPD_CLIENT} with Tilix"*,*|*,"Launch ${MPD_CLIENT} with Tilix"*|"lt",*|*,"lt")
              MPCPLUS="${MPD_CLIENT}"
              TILIX=1
              MPP_MODE=tilix
              CURRENT=
              GNOME=
              KITTY=
              RETRO=
              SIMPLE=
              break
              ;;
          "Install Cantata"*,*|*,"Install Cantata"*|"ic",*|*,"ic")
              mppinit cantata
              have_cantata=$(type -p cantata)
              skip_it_so=1
              break
              ;;
          "Cantata Music Player Plus"*,*|*,"Cantata Music Player Plus"*|"C",*|*,"C")
              cantata >/dev/null 2>&1 &
              skip_it_so=1
              break
              ;;
          "Install Spotify"*,*|*,"Install Spotify"*|"is",*|*,"is")
              mppinit spotify
              pathadd "${HOME}/.cargo/bin"
              have_spot=$(type -p spotify_player)
              skip_it_so=1
              break
              ;;
          "Spotify Music Player Plus"*,*|*,"Spotify Music Player Plus"*|"sp",*|*,"sp")
              mpplus -l spotify &
              skip_it_so=1
              break
              ;;
          "Install YouTube"*,*|*,"Install YouTube"*|"iy",*|*,"iy")
              mppinit youtube
              have_ytm=$(type -p youtube-music)
              skip_it_so=1
              break
              ;;
          "YouTube Music Player Plus"*,*|*,"YouTube Music Player Plus"*|"y",*|*,"y")
              youtube-music >/dev/null 2>&1 &
              skip_it_so=1
              break
              ;;
          "ASCIImatics Animations"*,*|*,"ASCIImatics Animations"*|"a",*|*,"a")
              clear_screen
              printf "\n"
              show_ascii_menu
              skip_it_so=1
              break
              ;;
          "Manage Downloads"*,*|*,"Manage Downloads"*|"d",*|*,"d")
              clear_screen
              printf "\n"
              show_downloads_menu
              skip_it_so=1
              break
              ;;
          "Manage Services"*,*|*,"Manage Services"*|"s",*|*,"s")
              clear_screen
              printf "\n"
              show_services_menu
              skip_it_so=1
              break
              ;;
          "Open Navidrome"*,*|*,"Open Navidrome"*|"on",*|*,"on")
              if [ "${have_gio}" ]; then
                gio open 'http://localhost:4533' >/dev/null 2>&1
              else
                xdg-open 'http://localhost:4533' >/dev/null 2>&1
              fi
              skip_it_so=1
              break
              ;;
          "View Services Status"*,*|*,"View Services Status"*|"v",*|*,"v")
              show_full_status
              PS3="${BOLD}${PLEASE} command choice (numeric or text, 'h' for help): ${NORM}"
              options=("Manage Services             [s]")
              options+=("Main menu                   [m]")
              options+=("Quit                        [q]")
              select opt in "${options[@]}"
              do
                case "$opt,$REPLY" in
                    "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
                        clear_screen
                        printf "\n"
                        show_help_menu
                        ;;
                    "Manage Services"*,*|*,"Manage Services"*|"s",*|*,"s")
                        clear_screen
                        printf "\n"
                        show_services_menu
                        break
                        ;;
                    "Main menu"*,*|*,"Main menu"*|"Back",*|*,"Back"|"back",*|*,"back"|"m",*|*,"m")
                        clear_screen
                        break
                        ;;
                    "Quit"*,*|*,"Quit"*|"quit",*|*,"quit"|"q",*|*,"q")
                        farewell_exit "Exiting MusicPlayerPlus"
                        ;;
                    *,*|*,*)
                        break
                        ;;
                esac
                REPLY=
              done
              skip_it_so=1
              break
              ;;
          "View Music Service Log"*,*|*,"View Music Service Log"*|"l",*|*,"l")
              clear_screen
              printf "\n"
              show_logs_menu
              skip_it_so=1
              break
              ;;
          "List"*,*|*,"List"*|"m",*|*,"m")
              clear_screen
              printf "\n"
              show_fzmp_menu
              skip_it_so=1
              break
              ;;
          "Select Music"*,*|*,"Select Music"*|"M",*|*,"M")
              CUR_MUS_DIR="${MUSIC_DIR}"
              select_music_dir
              [ "${CUR_MUS_DIR}" == "${MUSIC_DIR}" ] || {
                save_config
                mppinit sync
              }
              skip_it_so=1
              break
              ;;
          "Convert M4A"*,*|*,"Convert M4A"*|"c",*|*,"c")
              CONVERT_M4A=1
              break
              ;;
          "Convert WAV"*,*|*,"Convert WAV"*|"w",*|*,"w")
              CONVERT_WAV=1
              break
              ;;
          "Activate"*,*|*,"Activate"*|"S",*|*,"S")
              ACT_YAMS=1
              break
              ;;
          "Blissify"*,*|*,"Blissify"*|"b",*|*,"b")
              BLISSIFY=1
              break
              ;;
          "Essentia"*,*|*,"Essentia"*|"e",*|*,"e")
              XTRACTOR="all"
              break
              ;;
          "Fetch"*,*|*,"Fetch"*|"f",*|*,"f")
              FETCH_LYRICS=1
              break
              ;;
          "Import"*,*|*,"Import"*|"I",*|*,"I")
              BEETS_IMPORT=1
              break
              ;;
          "About"*,* | *,"About"* | "about"*,* | *,"about"* | "A",* | *,"A")
              show_about
              prompt_continue
              skip_it_so=1
              break
              ;;
          "Configure"*,* | *,"Configure"* | "configure"*,* | *,"configure"* | "E",* | *,"E")
              mpplus -l config &
              skip_it_so=1
              break
              ;;
          "Info"*,*|*,"Info"*|"i",*|*,"i")
              show_info
              prompt_continue
              skip_it_so=1
              break
              ;;
          "Toggle Show Cover Art"*,*|*,"Toggle Show Cover Art"*|"S",*|*,"S")
              if [ "${COVER_ART}" ]
              then
                COVER_ART=
              else
                COVER_ART=1
              fi
              if [ "${COVER_ART}" ]
              then
                USE_TMUX=1
                MPCPLUS_TMUX=$(echo ${MPCPLUS_TMUX} | sed -e "s/ -A//")
              else
                USE_TMUX=
                MPCPLUS_TMUX="${MPCPLUS_TMUX} -A"
              fi
              save_it_so=1
              skip_it_so=1
              break
              ;;
          "Toggle Use Tmux"*,*|*,"Toggle Use Tmux"*|"t",*|*,"t")
              if [ "${USE_TMUX}" ]
              then
                USE_TMUX=
                RECORD=
              else
                USE_TMUX=1
              fi
              save_it_so=1
              skip_it_so=1
              break
              ;;
          "Toggle Record Tmux"*,*|*,"Toggle Record Tmux"*|"R",*|*,"R")
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                USE_TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                MPCPLUS_TMUX="${MPCPLUS_TMUX} -r"
              else
                MPCPLUS_TMUX=$(echo ${MPCPLUS_TMUX} | sed -e "s/ -r//")
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Fullscreen"*,*|*,"Toggle Fullscreen"*|"F",*|*,"F")
              if [ "${FULLSCREEN}" ]
              then
                FULLSCREEN=
              else
                FULLSCREEN=1
              fi
              save_it_so=1
              skip_it_so=1
              break
              ;;
          "Asciiville"*,*|*,"Asciiville"*|"am",*|*,"am")
              clear_screen
              asciiville
              clear_screen
              skip_it_so=1
              break
              ;;
          "Kitty Control"*,*|*,"Kitty Control"*|"km",*|*,"km")
              clear_screen
              kitty-control
              clear_screen
              skip_it_so=1
              break
              ;;
          "MagicMirror"*,*|*,"MagicMirror"*|"mm",*|*,"mm")
              clear_screen
              mirror
              clear_screen
              skip_it_so=1
              break
              ;;
          "RoonCommandLine"*,*|*,"RoonCommandLine"*|"rm",*|*,"rm")
              clear_screen
              roon
              clear_screen
              skip_it_so=1
              break
              ;;
          "Quit"*,*|*,"Quit"*|"quit",*|*,"quit"|"q",*|*,"q")
              farewell_exit "Exiting MusicPlayerPlus"
              ;;
          *,*|*,*)
              skip_it_so=1
              break
              ;;
      esac
      REPLY=
    done
    [ "${save_it_so}" ] && {
      save_config
    }
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
}

init_vars() {
  if [ "${MPD_CLIENT}" ]
  then
    MPCPLUS="${MPD_CLIENT}"
    mpcbase=$(basename ${MPCPLUS})
    type -p ${mpcbase} > /dev/null || {
      [ -x "${MPCPLUS}" ] || {
        MPCPLUS=mpcplus
      }
    }
  else
    MPCPLUS="mpcplus"
  fi
  MPD_CLIENT="${MPCPLUS}"
  if [ "${USE_GRAD}" ]
  then
    MPCPLUS_TMUX="mpcplus-tmux -c ${MPCPLUS}"
  else
    MPCPLUS_TMUX="mpcplus-tmux -c ${MPCPLUS} -g"
  fi
  MPPSPLASH="mppsplash"
  MPPSPLASH_TMUX="mppsplash-tmux"

  CLIENT=
  CONVERT_WAV=
  CONVERT_M4A=
  DOWNLOAD_ART=
  DOWNLOAD_BANDCAMP=
  DOWNLOAD_SOUNDCLOUD=
  DOWNLOAD_DISCOGS=
  DOWNLOAD_LOCAL=
  DOWNLOAD_YOUTUBE=
  LIST_YT_PLAYLISTS=
  LIST_YT_UPLOADS=
  LIST_YT_URL=
  DL_URL=
  YT_USER=
  ACT_YAMS=
  DIS_YAMS=
  FETCH_LYRICS=
  BEETS_IMPORT=
  ACBRAINZ=
  BLISSIFY=
  XTRACTOR=
  HALFHEIGHT=
  INTERACTIVE=
  FZMPOPT=
  MUSIC_DIRECTORY=
  QRTRHEIGHT=
  RECORD=
  SPLASH=
  TMUX_SPLASH=
  USAGE=
}

save_config() {
  echo "## MusicPlayerPlus runtime configuration" > ${MPPCONF}
  echo "#" >> ${MPPCONF}
  echo "#  After modifying any of the following settings, run the command:" >> ${MPPCONF}
  echo "#    mppinit sync" >> ${MPPCONF}
  echo "#  as your normal MusicPlayerPlus user" >> ${MPPCONF}
  echo "" >> ${MPPCONF}
  echo "## Music library location" >> ${MPPCONF}
  echo "#" >> ${MPPCONF}
  echo "MUSIC_DIR=\"${MUSIC_DIR}\"" >> ${MPPCONF}
  echo "" >> ${MPPCONF}
  echo "## MPD Client" >> ${MPPCONF}
  echo "#" >> ${MPPCONF}
  echo "# Album cover art is only supported with 'mpcplus' and 'ncmpcpp'" >> ${MPPCONF}
  echo "MPD_CLIENT=\"${MPD_CLIENT}\"" >> ${MPPCONF}
  echo "" >> ${MPPCONF}
  echo "## General settings" >> ${MPPCONF}
  echo "#" >> ${MPPCONF}
  echo "# To enable any of these, set to 1" >> ${MPPCONF}
  echo "# For example, to enable cover art display in tmux sessions set COVER_ART=1" >> ${MPPCONF}
  echo "#" >> ${MPPCONF}
  echo "# Has mppinit been run" >> ${MPPCONF}
  echo "MPPINIT=${MPPINIT}" >> ${MPPCONF}
  echo "# Play audio during asciimatics animations" >> ${MPPCONF}
  echo "AUDIO=${AUDIO}" >> ${MPPCONF}
  echo "# Display cover art in tmux sessions" >> ${MPPCONF}
  echo "COVER_ART=${COVER_ART}" >> ${MPPCONF}
  echo "# Display mpcplus and mppcava in a tmux session" >> ${MPPCONF}
  echo "USE_TMUX=${USE_TMUX}" >> ${MPPCONF}
  echo "" >> ${MPPCONF}
  echo "## Terminal emulator preference" >> ${MPPCONF}
  echo "#" >> ${MPPCONF}
  echo "#  Can be one of: console, current, gnome, kitty, retro, simple, tilix" >> ${MPPCONF}
  echo "#  Where:" >> ${MPPCONF}
  echo "#    'console' will force a tmux session" >> ${MPPCONF}
  echo "#    'current' will force a tmux session in the current terminal window" >> ${MPPCONF}
  echo "#    'gnome' will use the gnome-terminal emulator if installed" >> ${MPPCONF}
  echo "#    'kitty' will use the Kitty terminal emulator if installed" >> ${MPPCONF}
  echo "#    'retro' will use cool-retro-term if installed" >> ${MPPCONF}
  echo "#    'simple' will use the ST terminal emulator if installed" >> ${MPPCONF}
  echo "#    'tilix' will use the Tilix terminal emulator if installed" >> ${MPPCONF}
  echo "#  Default fallback if none specified or not available is Kitty" >> ${MPPCONF}
  echo "#" >> ${MPPCONF}
  echo "#  Uncomment the preferred mode" >> ${MPPCONF}
  if [ "${CONSOLE_MODE}" ]
  then
    echo "MPP_MODE=console" >> ${MPPCONF}
    echo "#MPP_MODE=current" >> ${MPPCONF}
    echo "#MPP_MODE=gnome" >> ${MPPCONF}
    echo "#MPP_MODE=retro" >> ${MPPCONF}
    echo "#MPP_MODE=simple" >> ${MPPCONF}
    echo "#MPP_MODE=tilix" >> ${MPPCONF}
    echo "#MPP_MODE=kitty" >> ${MPPCONF}
  else
    echo "#MPP_MODE=console" >> ${MPPCONF}
    if [ "${CURRENT}" ]
    then
      echo "MPP_MODE=current" >> ${MPPCONF}
      echo "#MPP_MODE=gnome" >> ${MPPCONF}
      echo "#MPP_MODE=retro" >> ${MPPCONF}
      echo "#MPP_MODE=simple" >> ${MPPCONF}
      echo "#MPP_MODE=tilix" >> ${MPPCONF}
      echo "#MPP_MODE=kitty" >> ${MPPCONF}
    else
      echo "#MPP_MODE=current" >> ${MPPCONF}
      if [ "${GNOME}" ]
      then
        echo "MPP_MODE=gnome" >> ${MPPCONF}
        echo "#MPP_MODE=retro" >> ${MPPCONF}
        echo "#MPP_MODE=simple" >> ${MPPCONF}
        echo "#MPP_MODE=tilix" >> ${MPPCONF}
        echo "#MPP_MODE=kitty" >> ${MPPCONF}
      else
        echo "#MPP_MODE=gnome" >> ${MPPCONF}
        if [ "${RETRO}" ]
        then
          echo "MPP_MODE=retro" >> ${MPPCONF}
          echo "#MPP_MODE=simple" >> ${MPPCONF}
          echo "#MPP_MODE=tilix" >> ${MPPCONF}
          echo "#MPP_MODE=kitty" >> ${MPPCONF}
        else
          echo "#MPP_MODE=retro" >> ${MPPCONF}
          if [ "${SIMPLE}" ]
          then
            echo "MPP_MODE=simple" >> ${MPPCONF}
            echo "#MPP_MODE=tilix" >> ${MPPCONF}
            echo "#MPP_MODE=kitty" >> ${MPPCONF}
          else
            echo "#MPP_MODE=simple" >> ${MPPCONF}
            if [ "${TILIX}" ]
            then
              echo "MPP_MODE=tilix" >> ${MPPCONF}
              echo "#MPP_MODE=kitty" >> ${MPPCONF}
            else
              echo "#MPP_MODE=tilix" >> ${MPPCONF}
              if [ "${KITTY}" ]
              then
                echo "MPP_MODE=kitty" >> ${MPPCONF}
              else
                echo "#MPP_MODE=kitty" >> ${MPPCONF}
              fi
            fi
          fi
        fi
      fi
    fi
  fi

  echo "" >> ${MPPCONF}
  echo "## Service access" >> ${MPPCONF}
  echo "#" >> ${MPPCONF}
  echo "# The Bandcamp username can be found by visiting Bandcamp 'Settings' -> 'Fan'" >> ${MPPCONF}
  echo "# If you do not have a Bandcamp account, leave blank" >> ${MPPCONF}
  echo "BANDCAMP_USER=${BANDCAMP_USER}" >> ${MPPCONF}
  echo "" >> ${MPPCONF}
  echo "# The Discogs username can be found by visiting discogs.com. Login, use the" >> ${MPPCONF}
  echo "# dropdown of your user icon in the upper right corner, click on 'Profile'." >> ${MPPCONF}
  echo "# Your Discogs username is the last component of the profile URL." >> ${MPPCONF}
  echo "DISCOGS_USER=${DISCOGS_USER}" >> ${MPPCONF}
  echo "# The Discogs API token can be found by visiting" >> ${MPPCONF}
  echo "# https://www.discogs.com/settings/developers" >> ${MPPCONF}
  echo "DISCOGS_TOKEN=${DISCOGS_TOKEN}" >> ${MPPCONF}
  echo "# Location of the generated custom Discogs Obsidian vault" >> ${MPPCONF}
  echo "# Can be anywhere you have write permission" >> ${MPPCONF}
  echo "DISCOGS_DIR=\"${DISCOGS_DIR}\"" >> ${MPPCONF}
  echo "" >> ${MPPCONF}
  echo "# Your Last.fm username, api key, and api secret" >> ${MPPCONF}
  echo "# If you do not have a Last.fm account, leave blank" >> ${MPPCONF}
  echo "LASTFM_USER=${LASTFM_USER}" >> ${MPPCONF}
  echo "LASTFM_APIKEY=${LASTFM_APIKEY}" >> ${MPPCONF}
  echo "LASTFM_SECRET=${LASTFM_SECRET}" >> ${MPPCONF}
  echo "" >> ${MPPCONF}
  echo "# The Soundcloud user slug can be found by logging in to Soundcloud" >> ${MPPCONF}
  echo "# click on the username at top right then 'Profile'. The user slug" >> ${MPPCONF}
  echo "# is the last component of the URL when viewing your Soundcloud Profile." >> ${MPPCONF}
  echo "# If you do not have a Soundcloud account, leave blank" >> ${MPPCONF}
  echo "SOUNDCLOUD_SLUG=${SOUNDCLOUD_SLUG}" >> ${MPPCONF}
  echo "" >> ${MPPCONF}
  echo "# Your Spotify client id and client secret" >> ${MPPCONF}
  echo "# If you do not have a Spotify account, leave blank" >> ${MPPCONF}
  echo "SPOTIFY_CLIENT=${SPOTIFY_CLIENT}" >> ${MPPCONF}
  echo "SPOTIFY_SECRET=${SPOTIFY_SECRET}" >> ${MPPCONF}
  echo "" >> ${MPPCONF}
  echo "# Your YouTube api key" >> ${MPPCONF}
  echo "# If you do not have a YouTube account, leave blank" >> ${MPPCONF}
  echo "YOUTUBE_APIKEY=${YOUTUBE_APIKEY}" >> ${MPPCONF}

  echo "" >> ${MPPCONF}
  echo "## Album cover art position" >> ${MPPCONF}
  echo "#" >> ${MPPCONF}
  echo "# Album cover art is positioned within the preferred terminal window with" >> ${MPPCONF}
  echo "# padding values hard coded in the cover art display script. These padding" >> ${MPPCONF}
  echo "# values are customized for each of the supported terminal emulators. The" >> ${MPPCONF}
  echo "# default padding values should suffice but they can be overriden here. To" >> ${MPPCONF}
  echo "# override the padding values, set OVERRIDE_PADDING=1 and set any or all of" >> ${MPPCONF}
  echo "# the 'padding_override_*' values to adjust album cover art placement. See" >> ${MPPCONF}
  echo "# ~/.config/mpcplus/ueberzug/mpcplus_cover_art.sh for default padding values." >> ${MPPCONF}
  echo "#" >> ${MPPCONF}
  echo "# Set to 1 to override default padding, leave unset to use custom defaults" >> ${MPPCONF}
  echo "OVERRIDE_PADDING=${OVERRIDE_PADDING}" >> ${MPPCONF}
  echo "# Uncomment any or all and set preferred padding value(s)" >> ${MPPCONF}
  if [ "${padding_override_top}" ]
  then
    echo "padding_override_top=${padding_override_top}" >> ${MPPCONF}
  else
    echo "# padding_override_top=3" >> ${MPPCONF}
  fi
  if [ "${padding_override_bottom}" ]
  then
    echo "padding_override_bottom=${padding_override_bottom}" >> ${MPPCONF}
  else
    echo "# padding_override_bottom=1" >> ${MPPCONF}
  fi
  if [ "${padding_override_left}" ]
  then
    echo "padding_override_left=${padding_override_left}" >> ${MPPCONF}
  else
    echo "# padding_override_left=1" >> ${MPPCONF}
  fi
  if [ "${padding_override_right}" ]
  then
    echo "padding_override_right=${padding_override_right}" >> ${MPPCONF}
  else
    echo "# padding_override_right=0" >> ${MPPCONF}
  fi
  echo "#" >> ${MPPCONF}
  echo "# The font size in pixels is set to 22x45 for album cover art display." >> ${MPPCONF}
  echo "# To override this, set OVERRIDE_FONT_SIZE=1 and adjust the font width and/or" >> ${MPPCONF}
  echo "# font height in pixels to match your system." >> ${MPPCONF}
  echo "OVERRIDE_FONT_SIZE=${OVERRIDE_FONT_SIZE}" >> ${MPPCONF}
  echo "# Uncomment either or both and set font width and/or font height value(s)" >> ${MPPCONF}
  if [ "${font_override_width}" ]
  then
    echo "font_override_width=${font_override_width}" >> ${MPPCONF}
  else
    echo "# font_override_width=22" >> ${MPPCONF}
  fi
  if [ "${font_override_height}" ]
  then
    echo "font_override_height=${font_override_height}" >> ${MPPCONF}
  else
    echo "# font_override_height=45" >> ${MPPCONF}
  fi
  chmod 600 ${MPPCONF}
}

set_user_conf() {
  exitcode=$?
  save_config
  exit ${exitcode}
}

pathadd() {
  if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
    PATH="$1${PATH:+":$PATH"}"
  fi
}

set_need_yams() {
  systemctl --user is-active --quiet yams.service
  if [ $? -eq 0 ]
  then
    need_yams=
  else
    systemctl --user is-enabled --quiet yams.service
    if [ $? -eq 0 ]
    then
      if [ -f ${HOME}/.config/yams/.lastfm_session ]; then
        need_yams=
      else
        need_yams=1
      fi
    else
      need_yams=1
    fi
  fi
}

pathadd "/usr/local/bin"
pathadd "${HOME}/.local/bin"
pathadd "${HOME}/.cargo/bin"
export PATH

[ -f "${MPPCONF}" ] || save_config
[ -f "${MPPCONF}" ] && . "${MPPCONF}"
# Convert 0 settings to unset
[ "${MPPINIT}" == "0" ] && MPPINIT=
[ "${AUDIO}" == "0" ] && AUDIO=
[ "${COVER_ART}" == "0" ] && COVER_ART=
[ "${USE_TMUX}" == "0" ] && USE_TMUX=
[ "${OVERRIDE_PADDING}" == "0" ] && OVERRIDE_PADDING=
[ "${OVERRIDE_FONT_SIZE}" == "0" ] && OVERRIDE_FONT_SIZE=

# Check if initialization has been run
[ "${MPPINIT}" ] || {
  echo ""
  echo "MusicPlayerPlus initialization needs to be run once."
  echo "Answer 'y' to initialize, or 'n' to skip it for now."
  echo ""
  while true
  do
    read -p "Initialize MusicPlayerPlus now [y/n] " answer
    case ${answer} in
      [Yy]* )
        mppinit
        break
        ;;
      [Nn]* )
        printf "\nSkipping initialization.\n"
        printf "\nInitialize MusicPlayerPlus with the command 'mppinit'\n"
        read -p "Press Enter to continue" contans
        break
        ;;
      * ) echo "Please answer 'y' to initialize, or 'n' to skip."
        ;;
    esac
  done
}

[ -f ${HOME}/.venv/bin/activate ] && source ${HOME}/.venv/bin/activate

have_beet=$(type -p beet)
have_wmctrl=$(type -p wmctrl)
have_xprop=$(type -p xprop)
have_xrandr=$(type -p xrandr)
have_xdpy=$(type -p xdpyinfo)
have_cantata=$(type -p cantata)
have_spot=$(type -p spotify_player)
have_ytm=$(type -p youtube-music)
have_gnome=$(type -p gnome-terminal)
have_retro=$(type -p cool-retro-term)
have_simple=$(type -p st)
have_tilix=$(type -p tilix)
have_kitty=$(type -p kitty)
have_gio=$(type -p gio)

init_vars
AUDIO=
COVER_ART=
FULLSCREEN=
CURRENT=
GNOME=
KITTY=
RETRO=
SIMPLE=
TILIX=
USE_TMUX=

# Retrieve user preferences
[ -f ${MPPCONF} ] && . ${MPPCONF}
case "${MPP_MODE}" in
  console)
    if [ "${DISPLAY}" ]
    then
      consolemode=
      # Check if on a console screen
      have_tty=$(type -p tty)
      [ "${have_tty}" ] && {
        tty=$(tty)
        echo "${tty}" | grep /dev/tty > /dev/null && consolemode=1
        echo "${tty}" | grep /dev/con > /dev/null && consolemode=1
      }
      [ "${consolemode}" ] || {
        # Check if this is an SSH session
        [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] && consolemode=1
      }
      if [ "${consolemode}" ]
      then
        CONSOLE_MODE=1
        USE_TMUX=1
      else
        pick_terminal || {
          CONSOLE_MODE=1
          USE_TMUX=1
        }
      fi
    else
      CONSOLE_MODE=1
      USE_TMUX=1
    fi
    ;;
  current)
    USE_TMUX=1
    CURRENT=1
    ;;
  gnome)
    GNOME=1
    [ "${have_gnome}" ] || {
      KITTY=1
      GNOME=
    }
    ;;
  kitty)
    KITTY=1
    ;;
  retro)
    RETRO=1
    [ "${have_retro}" ] || {
      KITTY=1
      RETRO=
    }
    ;;
  simple)
    SIMPLE=1
    [ "${have_simple}" ] || {
      KITTY=1
      SIMPLE=
    }
    ;;
  tilix)
    TILIX=1
    [ "${have_tilix}" ] || {
      KITTY=1
      TILIX=
    }
    ;;
  *)
    KITTY=1
    ;;
esac

# Check if the window manager supports move/resize and DISPLAY can be opened
if [ "${DISPLAY}" ]
then
  movewindow=
  hasopacity=
  consolemode=
  # First check if on a console screen
  have_tty=$(type -p tty)
  [ "${have_tty}" ] && {
    tty=$(tty)
    echo "${tty}" | grep /dev/tty > /dev/null && consolemode=1
    echo "${tty}" | grep /dev/con > /dev/null && consolemode=1
  }
  # Next check if this is an SSH session
  [ "${consolemode}" ] || {
    # Check if this is an SSH session
    [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] && consolemode=1
  }
  if [ "${consolemode}" ]
  then
    CONSOLE_MODE=1
    USE_EWMH=
    USE_OPAC=
    USE_TMUX=1
  else
    # Check window manager's supported hints
    if [ "${have_xprop}" ]
    then
      hints=$(xprop -root -notype | grep ^_NET_SUPPORTED)
      echo "${hints}" | grep _NET_MOVERESIZE_WINDOW > /dev/null && movewindow=1
      echo "${hints}" | grep _NET_WM_WINDOW_OPACITY > /dev/null && hasopacity=1
      if [ "${movewindow}" ]
      then
        USE_EWMH=1
      else
        USE_EWMH=
        CONSOLE_MODE=1
        USE_TMUX=1
      fi
      if [ "${hasopacity}" ]
      then
        USE_OPAC=1
      else
        USE_OPAC=
      fi
    else
      status=0
      if [ -x ${SCRIPTS}/check_tty.sh ]
      then
        ${SCRIPTS}/check_tty.sh
        status=$?
      else
        if [ "${have_xdpy}" ]
        then
          xdpyinfo -display "${DISPLAY}" > /dev/null 2>&1
          status=$?
        else
          if [ "${have_kitty}" ]
          then
            kitty echo "" > /dev/null 2>&1
            status=$?
          else
            [ "${have_gnome}" ] && {
              gnome-terminal --quiet -- echo "" > /dev/null 2>&1
              status=$?
            }
          fi
        fi
      fi
      if [ ${status} -eq 0 ]
      then
        USE_EWMH=1
        USE_OPAC=1
      else
        CONSOLE_MODE=1
        USE_EWMH=
        USE_OPAC=
        USE_TMUX=1
      fi
    fi
  fi
else
  CONSOLE_MODE=1
  USE_EWMH=
  USE_OPAC=
  USE_TMUX=1
fi

need_yams=1
set_need_yams

if [ "${CONSOLE_MODE}" ]
then
  have_cantata=
  have_ytm=
  have_gnome=
  have_retro=
  have_tilix=
  have_simple=
  have_kitty=
  s_wid=1920
  s_hit=1080
else
  [ "${have_xrandr}" ] && {
    read -r s_wid s_hit < <(xrandr | grep current | \
            awk -F ',' '{ print $2 }' | awk '{ print $2, $4 }')
   }
fi
if [ -x /opt/navidrome/navidrome ]
then
  have_navi=1
else
  have_navi=
fi
have_uebz=$(type -p ueberzug)
if [ "${DISPLAY}" ]; then
  have_dmenu=$(type -p dmenu)
else
  have_dmenu=
fi
have_fzf=$(type -p fzf)
have_mpc=$(type -p mpc)
have_mopidy=$(type -p mopidy)
have_nema=$(type -p asciinema)
have_figlet=$(type -p figlet)
have_lolcat=$(type -p lolcat)
have_lynx=$(type -p lynx)
have_w3m=$(type -p w3m)
have_ranger=$(type -p ranger)
have_rich=$(type -p rich)
have_ascii=$(type -p asciiville)
have_asciiart=$(type -p asciiart)
have_kc=$(type -p kitty-control)
if [ -d /usr/local/Roon ]
then
  have_roon=$(type -p roon)
else
  have_roon=
fi
if [ -d /usr/local/MirrorCommand ]
then
  have_mirror=$(type -p mirror)
else
  have_mirror=
fi
writeflag=
tagflag=
disable_ewmh=

if [ "${have_figlet}" ]
then
  use_figlet=1
  [ -d "${FIG_FONTS}" ] || {
    DEF_FIG_FONTS=$(figlet -I2)
    if [ -d "${DEF_FIG_FONTS}" ]
    then
      FIG_FONTS="${DEF_FIG_FONTS}"
    else
      use_figlet=
    fi
  }
else
  use_figlet=
fi

USE_MPCPLUS=1
KITTY_SOCKET="/tmp/__mppkitty__"
debug=
dryrun=
vault=
while getopts "A:abBcC:D:d:eEFfGghHiIjJkKl:LmM:n:NpP:qQrRSs:tT:U:v:VwWx:X:yYZz:u" flag
do
  case $flag in
    a)
      AUDIO=1
      MPPSPLASH="${MPPSPLASH} -a"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -a"
      tagflag="-a"
      ;;
    A)
      art_onoff=$(echo "${OPTARG}" | tr '[:upper:]' '[:lower:]')
      if [ "${art_onoff}" == "on" ]
      then
        [ "${have_uebz}" ] && COVER_ART=1
        tagflag="-A"
      else
        if [ "${art_onoff}" == "off" ]
        then
          COVER_ART=
        else
          echo "Invalid argument to -A option: ${OPTARG}"
          usage
        fi
      fi
      ;;
    b)
      MPPSPLASH="${MPPSPLASH} -b"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -b"
      ;;
    B)
      BLISSIFY=1
      ;;
    c)
      USE_TMUX=1
      CURRENT=1
      MPP_MODE=current
      GNOME=
      KITTY=
      RETRO=
      SIMPLE=
      TILIX=
      ;;
    C)
      CLIENT="${OPTARG}"
      type -p "${CLIENT}" > /dev/null || {
        echo "Option '-C' indicates use ${CLIENT} MPD client."
        echo "However, ${CLIENT} is not installed or not in your path."
        echo "You may be able to install ${CLIENT} as follows:"
        printf "\n\n\tsudo apt install ${CLIENT}\nor"
        printf "\n\tsudo pacman -S ${CLIENT}\nor"
        printf "\n\tsudo dnf install ${CLIENT}\n\n"
        if [ "${have_cantata}" ]; then
          echo "Continuing, using cantata rather than ${CLIENT}."
          CLIENT=cantata
        else
          CLIENT=
          if [ "${MPD_CLIENT}" ]; then
            MPCPLUS="${MPD_CLIENT}"
            mpcbase=$(basename ${MPCPLUS})
            type -p ${mpcbase} > /dev/null || {
              [ -x "${MPCPLUS}" ] || {
                MPCPLUS=mpcplus
              }
            }
            echo "Continuing, using ${MPCPLUS} rather than ${CLIENT}."
          else
            MPCPLUS="mpcplus"
            echo "Continuing, using mpcplus rather than ${CLIENT}."
          fi
          MPD_CLIENT="${MPCPLUS}"
        fi
      }
      [ "${CLIENT}" ] && {
        MPCPLUS="${CLIENT}"
        MPD_CLIENT="${MPCPLUS}"
        USE_MPCPLUS=
      }
      ;;
    D)
      case "${OPTARG}" in
        Art|art|Album|album|Albumart|albumart)
          DOWNLOAD_ART=1
          ;;
        Bandcamp|bandcamp)
          DOWNLOAD_BANDCAMP=1
          ;;
        Soundcloud|soundcloud)
          DOWNLOAD_SOUNDCLOUD=1
          ;;
        Discogs|discogs)
          DOWNLOAD_DISCOGS=1
          ;;
        Local|local)
          DOWNLOAD_LOCAL=1
          ;;
        *)
          DOWNLOAD_YOUTUBE=1
          DL_URL="${OPTARG}"
          ;;
      esac
      ;;
    d)
      MUSIC_DIRECTORY="${OPTARG}"
      ;;
    E)
      USE_GRAD=
      ;;
    e)
      SIMPLE=1
      MPP_MODE=simple
      CURRENT=
      GNOME=
      KITTY=
      RETRO=
      TILIX=
      [ "${have_simple}" ] || {
        echo "Option '-e' indicates use simple terminal emulator."
        echo "However, st is not installed, unavailable, or not in your path."
        echo "You can install st using apt, pacman, or dnf as follows:"
        printf "\n\n\tsudo apt install stterm\nor"
        printf "\n\tsudo pacman -S stterm\nor"
        printf "\n\tsudo dnf install stterm\n\n"
        echo "Proceeding with Kitty terminal emulator"
        KITTY=1
        MPP_MODE=kitty
        TILIX=
      }
      ;;
    F)
      CONVERT_WAV=1
      ;;
    f)
      FULLSCREEN=1
      ;;
    G)
      CONVERT_M4A=1
      ;;
    g)
      GNOME=1
      MPP_MODE=gnome
      CURRENT=
      KITTY=
      RETRO=
      SIMPLE=
      TILIX=
      [ "${have_gnome}" ] || {
        echo "Option '-g' indicates use gnome-terminal emulator."
        echo "However, gnome-terminal is not installed or not in your path."
        echo "You can install gnome-terminal using apt, pacman, or dnf:"
        printf "\n\n\tsudo apt install gnome-terminal\nor"
        printf "\n\tsudo pacman -S gnome-terminal\nor"
        printf "\n\tsudo dnf install gnome-terminal\n\n"
        echo "Proceeding with Kitty terminal emulator"
        KITTY=1
        MPP_MODE=kitty
        GNOME=
      }
      ;;
    H)
      disable_ewmh=1
      ;;
    h)
      HALFHEIGHT=1
      ;;
    I)
      BEETS_IMPORT=1
      ;;
    i)
      INTERACTIVE=1
      ;;
    j)
      MPPSPLASH="${MPPSPLASH} -j"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l julia"
      ;;
    J)
      MPPSPLASH="${MPPSPLASH} -J"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -J"
      ;;
    K)
      kill_tmux_sessions
      farewell_exit "Exiting MusicPlayerPlus"
      ;;
    k)
      KITTY=1
      MPP_MODE=kitty
      GNOME=
      CURRENT=
      RETRO=
      SIMPLE=
      TILIX=
      [ "${have_kitty}" ] || {
        echo "Option '-k' indicates use Kitty terminal emulator."
        echo "However, kitty is not installed or not in your path."
        echo "Proceeding with current terminal emulator"
        KITTY=
        CURRENT=1
        MPP_MODE=current
        USE_TMUX=1
      }
      ;;
    l)
      case "${OPTARG}" in
        config*|Config*)
          MPCPLUS="vi ${HOME}/.config/mpprc"
          MPCPLUS_TMUX="${MPCPLUS}"
          MTITLE="Configure MusicPlayerPlus"
          USE_MPCPLUS=1
          USE_TMUX=1
          SPLASH=
          CURRENT=
          USE_EWMH=
          pick_terminal || CONSOLE_MODE=1
          make_it_so
          exit 0
          ;;
        Spotify*|spotify*)
          MPCPLUS="spotify_player"
          MPCPLUS_TMUX="${MPCPLUS}"
          MTITLE="Spotify Player"
          USE_MPCPLUS=1
          USE_TMUX=1
          SPLASH=
          CURRENT=
          USE_EWMH=
          pick_terminal || CONSOLE_MODE=1
          make_it_so
          exit 0
          ;;
        status|Status)
          show_full_status
          farewell_exit "Exiting MusicPlayerPlus"
          ;;
      esac
      ;;
    L)
      FETCH_LYRICS=1
      ;;
    m)
      MPPSPLASH="${MPPSPLASH} -m"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l rocks"
      ;;
    M)
      mpp_service ${OPTARG} mpd
      farewell_exit "Exiting MusicPlayerPlus"
      ;;
    n)
      MPPSPLASH="${MPPSPLASH} -c ${OPTARG}"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -c ${OPTARG}"
      ;;
    N)
      MPPSPLASH="${MPPSPLASH} -C"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -t"
      ;;
    p)
      MPPSPLASH="${MPPSPLASH} -p"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l plasma"
      ;;
    P)
      MPCPLUS_TMUX="${MPCPLUS_TMUX} -p ${OPTARG}"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l ${OPTARG}"
      ;;
    q)
      QRTRHEIGHT=1
      ;;
    Q)
      show_info
      printf "\n"
      exit 0
      ;;
    r)
      RETRO=1
      MPP_MODE=retro
      CURRENT=
      GNOME=
      KITTY=
      SIMPLE=
      TILIX=
      [ "${have_retro}" ] || {
        echo "Option '-r' indicates use cool-retro-term terminal emulator."
        echo "However, cool-retro-term is not installed or not in your path."
        echo "You can install cool-retro-term using apt, pacman, or dnf:"
        printf "\n\n\tsudo apt install cool-retro-term\nor"
        printf "\n\tsudo pacman -S cool-retro-term\nor"
        printf "\n\tsudo dnf install cool-retro-term\n\n"
        echo "Proceeding with Kitty"
        KITTY=1
        MPP_MODE=kitty
        RETRO=
      }
      ;;
    R)
      [ "${have_nema}" ] && {
        RECORD=1
        USE_TMUX=1
        MPCPLUS_TMUX="${MPCPLUS_TMUX} -r"
        MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -R"
      }
      ;;
    S)
      SPLASH=1
      ;;
    s)
      MPPSPLASH="${MPPSPLASH} -s ${OPTARG}"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -s ${OPTARG}"
      ;;
    t)
      TILIX=1
      MPP_MODE=tilix
      CURRENT=
      GNOME=
      KITTY=
      RETRO=
      SIMPLE=
      [ "${have_tilix}" ] || {
        echo "Option '-t' indicates use tilix terminal emulator."
        echo "However, tilix is not installed, unavailable, or not in your path."
        echo "You can install tilix using apt, pacman, or dnf as follows:"
        printf "\n\n\tsudo apt install tilix\nor"
        printf "\n\tsudo pacman -S tilix\nor"
        printf "\n\tsudo dnf install tilix\n\n"
        echo "Proceeding with Kitty terminal emulator"
        KITTY=1
        MPP_MODE=kitty
        TILIX=
      }
      ;;
    T)
      tmux_onoff=$(echo "${OPTARG}" | tr '[:upper:]' '[:lower:]')
      if [ "${tmux_onoff}" == "on" ]
      then
        USE_TMUX=1
      else
        if [ "${tmux_onoff}" == "off" ]
        then
          USE_TMUX=
          COVER_ART=
        else
          echo "Invalid argument to -T option: ${OPTARG}"
          usage
        fi
      fi
      ;;
    U)
      vault="${OPTARG}"
      ;;
    v)
      viz_com=$(echo "${OPTARG}" | awk ' { print $1 } ')
      have_viz=$(type -p ${viz_com})
      if [ "${have_viz}" ]
      then
        VISUALIZER="${OPTARG}"
      else
        echo "Specified visualizer ${OPTARG} not found."
        echo "Using ${VISUALIZER} visualizer"
      fi
      ;;
    V)
      debug=1
      ;;
    w)
      writeflag="-w"
      ;;
    W)
      writeflag="-W"
      ;;
    x)
      ACBRAINZ="${OPTARG}"
      ;;
    X)
      XTRACTOR="${OPTARG}"
      ;;
    y)
      DIS_YAMS=1
      ;;
    Y)
      ACT_YAMS=1
      ;;
    Z)
      dryrun="-n"
      ;;
    z)
      FZMPOPT="${OPTARG}"
      ;;
    u)
      USAGE=1
      ;;
    esac
done

impflags="${tagflag} ${writeflag}"

save_config
[ "${MPP_MODE}" ] && MPCPLUS_TMUX="${MPCPLUS_TMUX} -m ${MPP_MODE}"

[ "${AUDIO}" ] && {
  MPPSPLASH="${MPPSPLASH} -a"
  MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -a"
}

if [ "${COVER_ART}" ]
then
  USE_TMUX=1
else
  MPCPLUS_TMUX="${MPCPLUS_TMUX} -A"
fi

# The -T option says use tmux, -S says do asciimatics
# If we have both then do asciimatics in tmux
# If just the -T then do mpcplus in tmux
[ "${USE_TMUX}" ] && [ "${SPLASH}" ] && TMUX_SPLASH=1

[ "${CONSOLE_MODE}" ] || {
  [ "${GNOME}" ] || {
    [ "${TILIX}" ] || {
      [ "${RETRO}" ] || {
        [ "${SIMPLE}" ] || {
          if [ "${have_kitty}" ]
          then
            KITTY=1
          else
            echo "No option '-e', '-g', '-t', or '-r' indicates use Kitty"
            echo "terminal emulator. However, Kitty is not installed,"
            echo "unavailable, or not in your path."
            echo "You can install Kitty as follows:"
            printf "\n\n\tmppinit kitty\n\n"
            echo "Alternately, invoke mpplus with the '-t' option to use tilix,"
            echo "the '-g' option to use gnome-terminal, or '-e' to use st."
            pick_terminal || usage
          fi
        }
      }
    }
  }
}

[ "${HALFHEIGHT}" ] && [ "${QRTRHEIGHT}" ] && {
  [ "${FULLSCREEN}" ] && {
    echo "Only one of '-h' and '-q' should be specified"
    echo "Quarter-height overrides half-height. Using quarter-height."
    HALFHEIGHT=
  }
}
[ "${HALFHEIGHT}" ] && {
  [ "${FULLSCREEN}" ] || {
    echo "Height settings only apply when in fullscreen mode."
    echo "Ignoring '-h' half-height option."
    HALFHEIGHT=
  }
}
[ "${QRTRHEIGHT}" ] && {
  [ "${FULLSCREEN}" ] || {
    echo "Height settings only apply when in fullscreen mode."
    echo "Ignoring '-q' quarter-height option."
    QRTRHEIGHT=
  }
}

[ "${USAGE}" ] && usage

if [ "${INTERACTIVE}" ]
then
  DO_NOT_EXIT=1
  trap 'set_user_conf' SIGINT SIGTERM SIGHUP EXIT
  clear
  have_gum=$(type -p gum)
  have_figlet=$(type -p figlet)
  have_mppanim=$(type -p mppanim)
  [ "${have_gum}" ] && [ "${have_figlet}" ] && [ "${have_mppanim}" ] && {
    mppanim -a -q
    [ $? -eq 0 ] || tput cup 0 0 2>/dev/null
  }
  show_main_menu
else
  if [ "${FZMPOPT}" ]
  then
    fzmp -${FZMPOPT}
  else
    make_it_so
  fi
fi
